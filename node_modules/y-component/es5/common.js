'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // Copyright (c) 2017 Florian Klampfer
// Licensed under MIT

exports.simpleType = simpleType;
exports.setAttribute = setAttribute;

var _paramCase = require('param-case');

var _paramCase2 = _interopRequireDefault(_paramCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// infers primitive types form `defVal` and applies it to `val`
function simpleType(defVal, val) {
  if (typeof defVal === 'boolean') {
    return val != null;
  } else if (typeof defVal === 'number') {
    if (val != null) {
      return Number(val);
    }
    return defVal;
  } else if ((typeof defVal === 'undefined' ? 'undefined' : _typeof(defVal)) === 'object') {
    if (val != null) {
      return val.split ? val.split(',') : [];
    }
    return defVal;
  } else if (typeof defVal === 'string') {
    if (val != null) {
      return val;
    }
    return defVal;
  }
  return null;
}

function setAttribute(key, value) {
  var attrName = (0, _paramCase2.default)(key);

  if (value === true) {
    this.setAttribute(attrName, '');
  } else if (value === false || value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.length === 0) {
    this.removeAttribute(attrName);
  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.length > 0 && value.join) {
    this.setAttribute(attrName, value.join(','));
  } else {
    this.setAttribute(attrName, value);
  }
}