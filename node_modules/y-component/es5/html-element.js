'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _camelCase = require('camel-case');

var _camelCase2 = _interopRequireDefault(_camelCase);

var _paramCase = require('param-case');

var _paramCase2 = _interopRequireDefault(_paramCase);

var _common = require('./common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2017 Florian Klampfer
// Licensed under MIT

// const setImmediate = window.setImmediate || (f => setTimeout(f, 0));

function getStateFromAttributes() {
  var _this = this;

  var defaults = this.defaults();

  var state = {};

  Object.keys(defaults).forEach(function (key) {
    var attrName = (0, _paramCase2.default)(key);
    var attrVal = _this.getAttribute(attrName);
    var typedValue = (0, _common.simpleType)(defaults[key], attrVal);

    if (typedValue != null) {
      state[key] = typedValue;
    }
  });

  return state;
}

function reflectAttributeChanges() {
  var _this2 = this;

  var defaults = this.constructor.DEFAULTS;
  Object.keys(defaults).forEach(function (key) {
    return _common.setAttribute.call(_this2, key, _this2[key]);
  });
}

exports.default = function (C) {
  return function (_C) {
    _inherits(_class, _C);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'connectedCallback',

      // @override
      value: function connectedCallback() {
        this.createdOrConnectedCallback();
      }

      // @override

    }, {
      key: 'createdCallback',
      value: function createdCallback() {
        this.createdOrConnectedCallback();
      }
    }, {
      key: 'createdOrConnectedCallback',
      value: function createdOrConnectedCallback() {
        this.setupComponent();
        this.fireEvent('attached');
      }
    }, {
      key: 'setupComponent',
      value: function setupComponent() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setupComponent', this).call(this, this, getStateFromAttributes.call(this));
        reflectAttributeChanges.call(this);
        return this;
      }

      // @override

    }, {
      key: 'attributeChangedCallback',
      value: function attributeChangedCallback(attr, oldVal, val) {
        var defaults = this.defaults();
        var key = (0, _camelCase2.default)(attr);
        var typedValue = (0, _common.simpleType)(defaults[key], val);

        if (typedValue != null) {
          this[key] = typedValue;
        }
      }

      // @override

    }, {
      key: 'setStateKV',
      value: function setStateKV(key, value) {
        var oldVal = this[key];
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setStateKV', this).call(this, key, value);
        if (value !== oldVal) {
          _common.setAttribute.call(this, key, value);
        }
      }
    }, {
      key: 'getTemplateInstance',
      value: function getTemplateInstance(version) {
        return document.querySelector('link[href$="' + this.componentName + '.html"]').import.getElementById(this.componentName + '-template-' + version).content.cloneNode(true);
      }

      // @override

    }, {
      key: 'setupDOM',
      value: function setupDOM(el) {
        if ('attachShadow' in document.body) {
          el.attachShadow({ mode: 'open' });
          var instance = this.getTemplateInstance('v1');
          el.shadowRoot.appendChild(instance);
          return el.shadowRoot;
        } else if ('createShadowRoot' in document.body) {
          var shadowRoot = el.createShadowRoot();
          var _instance = this.getTemplateInstance('v0');
          shadowRoot.appendChild(_instance);
          return shadowRoot;
        }
        throw Error('ShadowDOM API not supported (neither v0 nor v1)');
      }

      // @override

    }, {
      key: 'getEl',
      value: function getEl() {
        return this;
      }
    }]);

    return _class;
  }(C);
};