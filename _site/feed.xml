<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>한걸음 천천히</title>
    <description>매일 매일 나아가는 개발자
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Sep 2024 21:08:31 +0900</pubDate>
    <lastBuildDate>Mon, 16 Sep 2024 21:08:31 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>블로그 시작의 계기</title>
        <description>&lt;h2 id=&quot;시작&quot;&gt;시작&lt;/h2&gt;

&lt;p&gt;블로그를 꾸준히 써오는 편 이었는데 취업을 준비하면서 자주 쓰지는 못했다.&lt;/p&gt;

&lt;p&gt;블로그를 이사하는 계기로 자주 써보려고 한다.&lt;/p&gt;

&lt;p&gt;꾸준하게 써야겠다.&lt;/p&gt;

&lt;p&gt;마지막은 내가 최근 좋아하는 글귀를 가져와 봤다.&lt;/p&gt;

&lt;h4 id=&quot;if-you-dont-risk-anything-you-risk-everything&quot;&gt;If you don’t risk anything, you risk everything&lt;/h4&gt;
</description>
        <pubDate>Mon, 16 Sep 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/life/2024/09/16/daily-01/</link>
        <guid isPermaLink="true">http://localhost:4000/life/2024/09/16/daily-01/</guid>
        
        <category>daily</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>제어의 역전(Inversion of Control)과 ApplicationContext</title>
        <description>&lt;h2 id=&quot;제어의-역전inversion-of-control&quot;&gt;제어의 역전(Inversion of Control)&lt;/h2&gt;

&lt;p&gt;프로그램의 제어흐름을 직접 제어하는 것이 아니라 외부(스프링)이 관리하는 것을 제어의 역전(loC)라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;스프링-컨테이너&quot;&gt;스프링 컨테이너&lt;/h2&gt;
&lt;h3 id=&quot;applicationcontext&quot;&gt;ApplicationContext&lt;/h3&gt;
&lt;p&gt;&lt;img width=&quot;700&quot; alt=&quot;스크린샷 2024-09-16 오후 9 06 08&quot; src=&quot;https://github.com/user-attachments/assets/76d1d251-e001-48b7-b0fc-8472a2380792&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext를 스프링 컨테이너라고 한다.&lt;/li&gt;
  &lt;li&gt;기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 사용한다.&lt;/li&gt;
  &lt;li&gt;스프링 컨테이너에서는 Configuration이 붙은 객체를 설정 정보로 사용한다. @Bean이라 붙은 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너로 등록한다. 이렇게 스프링 컨테이너로 등록된 객체를 스프링 빈이라고 한다.&lt;/li&gt;
  &lt;li&gt;예전에는 AppConfig를 통해서 필요한 객체를 직접 조회했지만, 이제는 스프링 컨테이너를 통해서 필요한 스프링 빈을 찾는다. 스프링 빈은 applicationContext.getBean()을 통해서 찾을 수 있다.&lt;/li&gt;
  &lt;li&gt;스프링 빈은 @Bean이 붙은 메서드의 명을 빈의 이름으로 사용하여 컨테이너에 등록한다.&lt;/li&gt;
  &lt;li&gt;스프링 컨테이너에 객체를 스프링 빈으로 등록하고, 찾을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;인프런 김영한님의 스프링 프레임워크 핵심 기술 강좌&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Sep 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/09/16/Spring-01/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/09/16/Spring-01/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
  </channel>
</rss>
