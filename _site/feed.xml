<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>일벌리는 개발자</title>
    <description>일을 벌여놔야 주워 담을 수 있습니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 12 May 2025 16:34:40 +0900</pubDate>
    <lastBuildDate>Mon, 12 May 2025 16:34:40 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>커널과 인터페이스</title>
        <description>&lt;h2 id=&quot;커널과-인터페이스&quot;&gt;커널과 인터페이스&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_6.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kernel
    &lt;ul&gt;
      &lt;li&gt;프로세스 관리, 메모리 관리, 저장장치 관리와 같은 운영체제의 핵심적인 기능을 모아놓은 것이다.&lt;/li&gt;
      &lt;li&gt;kernel의 성능에 따라 운영체제의 성능이 좌우된다. 자동차로 치면 엔진이라고 할 수 있다.&lt;/li&gt;
      &lt;li&gt;스마트폰의 운영체제에도 커널이 있다.
        &lt;ul&gt;
          &lt;li&gt;안드로이드는 커널이 공개되어 있다(리눅스 기반) 하지만 IOS는 커널이 공개되어 있지 않다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터페이스
    &lt;ul&gt;
      &lt;li&gt;자동차가 움직이는 데에는 핸들과 브레이크가 필요하다. 자동차를 올바르게 제어하기 위해서는 현재 시속, 기어의 상태, 엔진의 온도 등을 알려주는 계기판이 있어야 하는데 이를 인터페이스라고 한다.&lt;/li&gt;
      &lt;li&gt;커널에 사용자의 명령을 전달하고 실행 결과를 사용자에게 알려준다.&lt;/li&gt;
      &lt;li&gt;유닉스의 사용자 인터페이스는 shell, bashshell 등 여러 종류의 셸이 있다. 셸은 명령어 기반이라 일반인이 사용하기 불편하여 유닉스 운영체제를 어렵게 느끼는 사람들이 많다.(개발자에겐 참 편하다.) GUI 속 눈으로 파일 찾는게 더 힘들다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시스템-호출과-디바이스-드라이버&quot;&gt;시스템 호출과 디바이스 드라이버&lt;/h2&gt;

&lt;h3 id=&quot;시스템-호출&quot;&gt;시스템 호출&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;system call은 커널이 자신을 보고하기 위해 만든 인터페이스다. 커널은 사용자나 응용 프로그램으로부터 컴퓨터 자원을 보호하기 위해 자원에 직접 접근하는 것을 차단한다.&lt;/li&gt;
  &lt;li&gt;자원을 이용하려면 시스템 호출이라는 인터페이스를 이용하여 접근해야 한다.&lt;/li&gt;
  &lt;li&gt;직접 접근하는 예시와, 시스템 콜을 통한 접근의 차이를 커피를 먹는 경우에 비유해보자
    &lt;ul&gt;
      &lt;li&gt;직접 접근
        &lt;ul&gt;
          &lt;li&gt;사용자가 직접 컴퓨터 자원에 접근하여 작업하는 방식이다. 사용자는 커피머신이 어떻게 작동하는지, 커피와 설탕이 어딨는지, 모든 것을 다 알아야 한다. 이 경우는 자신이 원하는 커피를 만들 수는 있겠지만, 사용자의 부주의로 커피머신을 망가뜨릴 수도, 커피와 설탕을 찾느라 주변을 더럽힐 수도 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;시스템 호출을 통한 접근
        &lt;ul&gt;
          &lt;li&gt;누군가에게 요청하여 작업의 결과만 받는 방식이다. 사용자는 어떤 커피머신을 쓰는지, 어떻게 커피를 만드는지 등을 신경 쓸 필요 없이 결과값만 받으면 된다(추상화)
            &lt;ul&gt;
              &lt;li&gt;우리가 메서드를 호출하고 사용하는 방식이 우리는 모든 메서드의 내부구현을 알 필요 없이 결과만 리턴 받으면 되는 구조와 비슷하다. 뭐.. 메서드의 모든 내부 구조와 구현을 안다면 좋겠지만, 수많은 메서드들의 내부구현을 기억하기는 힘들다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;이와 마찬가지로 운영체제는 사용자나 응용 프로그램이 하드웨어 직접 접근하지 않는다. 그리고 대신 하드웨어와 같은 시스템 자원을 사용할 수 있도록 인터페이스를 제공해주는데 이것이 바로 시스템 콜이다.&lt;/li&gt;
          &lt;li&gt;
            &lt;h2 id=&quot;운영체제는-커널이-제공하는-서비스를-시스템-호출로-제한하고-다른-방법으로-커널에-들어오지-못하게-막음으로써-컴퓨터-자원을-보호한다&quot;&gt;운영체제는 커널이 제공하는 서비스를 시스템 호출로 제한하고, 다른 방법으로 커널에 들어오지 못하게 막음으로써 컴퓨터 자원을 보호한다.&lt;/h2&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;h2 id=&quot;api와-sdk&quot;&gt;API와 SDK&lt;/h2&gt;

    &lt;ul&gt;
      &lt;li&gt;API(Application Programming Interface(응용 프로그램 인터페이스)와 SDK(System Development Kit)(개발자용 키트)가 있다. API는 응용 프로그램이 자신과 연관된 프로그램을 만들 수 있도록 제공하는 인터페이스다. 포토샵을 예로들면 매우 강력한 그래픽 프로그램이지만, 수백 가지의 필터를 모두 제공하지는 않는다. 따라서 포토샵은 필터를 개발하려는 사람들을 위해 다양한 프로그래밍 인터페이스를 제공하는데 이 인터페이스가 바로 API이다.&lt;/li&gt;
      &lt;li&gt;운영체제의 API를 시스템 콜이라고 한다.&lt;/li&gt;
      &lt;li&gt;SDK는 프로그램 개발자를 위해 API or API 사용 메뉴얼 뿐만 아니라 프로그램 개발에 필요한 코드 편집기, 에뮬레이터 같은 각종 개발용 응용 프로그램까지 묶어서 배포하는 개발 툴을 말한다.
        &lt;ul&gt;
          &lt;li&gt;대표적인 예로 안드로이드 SDK Android Studio가 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;h2 id=&quot;드라이버&quot;&gt;드라이버&lt;/h2&gt;

    &lt;ul&gt;
      &lt;li&gt;응용 프로그램, 커널의 인터페이스가 시스템콜이면, 하드웨어의 인터페이스는 드라이버&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h2 id=&quot;커널의-구성&quot;&gt;커널의 구성&lt;/h2&gt;

    &lt;ul&gt;
      &lt;li&gt;프로세스 관리
        &lt;ul&gt;
          &lt;li&gt;프로세스에 CPU를 배분하고 작업에 필요한 환경을 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메모리 관리
        &lt;ul&gt;
          &lt;li&gt;프로세스에 작업 공간을 배치하고, 실제 메모리보다 더 큰 가상공간을 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;파일 시스템 관리
        &lt;ul&gt;
          &lt;li&gt;데이터를 저장하고 접근할 수 있는 인터페이스를 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;입출력 관리
        &lt;ul&gt;
          &lt;li&gt;필요한 입력과 출력 서비스를 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;프로세스 간 통신 관리
        &lt;ul&gt;
          &lt;li&gt;공동 작업을 위한 프로세스 간 통신 환경을 지원한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://m.yes24.com/Goods/Detail/111378840&quot;&gt;https://m.yes24.com/Goods/Detail/111378840&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 May 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cs/2025/05/12/Operating-system-05/</link>
        <guid isPermaLink="true">http://localhost:4000/cs/2025/05/12/Operating-system-05/</guid>
        
        <category>OS</category>
        
        
        <category>cs</category>
        
      </item>
    
      <item>
        <title>명령어 병렬 처리 기법</title>
        <description>&lt;h2 id=&quot;명령어-파이프라인&quot;&gt;명령어 파이프라인&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;명령어 인출 → 명령어 해석 → 명령어 실행 → 결과 저장&lt;/li&gt;
  &lt;li&gt;단계가 겹치지만 않는다면 CPU는 각 단계를 동시에 실행할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;예를 들어 CPU는 한 명령어를 ‘인출’하는 동안에 ‘실행’을 할 수 있고, 실행을 하는 중에는 ‘저장’을 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_5.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그림으로 나타내면 이러하다&lt;/li&gt;
  &lt;li&gt;명령어를 겹쳐서 수행하면 명령어를 하나하나 실행하는 것보다 더 효율적으로 처리를 할 수 있다.&lt;/li&gt;
  &lt;li&gt;이렇게 파이프라인에 넣고, 동시 처리하는 기법을 명령어 파이프라인 기법이라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;파이프라인-위험&quot;&gt;파이프라인 위험&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;파이프 라인을 통해서 일을 병렬처리 하면 빠르게 처리할 수는 있지만 3가지 위험이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-위험&quot;&gt;데이터 위험&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 위험은 명령어 간 데이터 의존성 때문에 발생하게 된다.
    &lt;ul&gt;
      &lt;li&gt;예를 들어 명령어1, 명령어2가 있다고 해보자
        &lt;ul&gt;
          &lt;li&gt;명령어2는 명령어1이 끝나야 실행이 가능하다.&lt;/li&gt;
          &lt;li&gt;따라서 명령어 1 실행이 끝나기 전에 명령어 2를 인출하면 원치 않는 값이 출력되므로 명령어2는 명령어1에 의존한다고 볼 수 있다.&lt;/li&gt;
          &lt;li&gt;따라서 의존적인 두 명령어를 동시에 실행하는 것은 파이프라인이 제대로 작동하지 않을 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제어위험&quot;&gt;제어위험&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;분기 여부가 결정되기 전에 파이프라인이 다음 명령어를 잘못 가져오면 문제 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;구조적-위험&quot;&gt;구조적 위험&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하드웨어 자원이 부족해서 명령어들이 동시에 실행될 수 없는 경우
    &lt;ul&gt;
      &lt;li&gt;하나의 메모리를 명령어 fetch와 데이터 read/write가 동시에 사용하려고 할 때 충돌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비순차적-명령어-처리&quot;&gt;비순차적 명령어 처리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;순차적 명령어 순서와 달리&lt;/strong&gt;, &lt;strong&gt;의존성이 없는 명령어를 먼저 실행&lt;/strong&gt;함으로써 파이프라인 정지를 방지하고 CPU 자원을 효율적으로 활용하는 기법
    &lt;ul&gt;
      &lt;li&gt;파이프라인 구조에서는 어떤 명령어가 &lt;strong&gt;데이터를 기다리거나 메모리 접근 때문에 지연&lt;/strong&gt;되면, 뒤에 있는 명령어들까지 멈추는 일이 생긴다.&lt;/li&gt;
      &lt;li&gt;이런 &lt;strong&gt;스톨&lt;/strong&gt;을 방지하고 성능을 유지하기 위해 등장한 기술이 비순차적 실행&lt;/li&gt;
      &lt;li&gt;의존성이 있는 명령어는 기다리고, 독립적인 다른 명령어를 먼저 실행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://m.yes24.com/Goods/Detail/111378840&quot;&gt;https://m.yes24.com/Goods/Detail/111378840&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 May 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cs/2025/05/07/Operating-system-04/</link>
        <guid isPermaLink="true">http://localhost:4000/cs/2025/05/07/Operating-system-04/</guid>
        
        <category>OS</category>
        
        
        <category>cs</category>
        
      </item>
    
      <item>
        <title>주소 지정 방식</title>
        <description>&lt;h2 id=&quot;주소-지정-방식&quot;&gt;주소 지정 방식&lt;/h2&gt;

&lt;p&gt;명렁어의 오퍼랜드 필드에 메모리나 레지스터의 주소를 담는다.
명령어는 오퍼랜드와 연산 코드로 이루어져 있는데 여기서 오퍼랜드란 연산에 사용할 데이터가 저장된 위치를 의미한다.&lt;/p&gt;

&lt;h2 id=&quot;오퍼랜드-필드에-메모리나-레지스터의-주소를-담는-이유가-뭘까&quot;&gt;오퍼랜드 필드에 메모리나 레지스터의 주소를 담는 이유가 뭘까?&lt;/h2&gt;

&lt;p&gt;그냥 연산코드, 연산에 사용될 데이터를 직접 추가하면 되는데 굳이 왜 주소를 담을까?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이유는 명령어 길이 때문이다.&lt;/li&gt;
  &lt;li&gt;명령어는 n개의 비트로 구성되어있고, 연산 코드 필드가 m비트라고 가정하면 오퍼랜드 필드의 길이는 n - m이 된다.&lt;/li&gt;
  &lt;li&gt;또한 메모리 낭비 이슈를 줄일 수 있다.
    &lt;ul&gt;
      &lt;li&gt;메모리 주소만 참조하면 알아서 반복적인 연산을 지속하기 때문에 직접 데이터 포함 방식보다 유지보수가 좋아진다.(Java의 참조)를 생각하면 쉽게 이해가 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-즉시-주소-지정-방식-immediate-addressing&quot;&gt;1. 즉시 주소 지정 방식 (Immediate Addressing)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연산에 사용할 데이터를 명령어의 오퍼랜드 필드에 &lt;strong&gt;직접 명시하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 접근이 필요 없기 때문에 가장 빠르다.&lt;/li&gt;
  &lt;li&gt;오퍼랜드 필드에 값을 직접 넣기 때문에 표현할 수 있는 데이터 크기에 제한이 있다.&lt;/li&gt;
  &lt;li&gt;주로 상수를 처리할 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;비유:&lt;/strong&gt; “R1에 숫자 5를 써라.” → 데이터를 어디서 가져오는 것이 아니라, 그 자리에서 말한 값을 바로 적는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;2-직접-주소-지정-방식-direct-addressing&quot;&gt;2. 직접 주소 지정 방식 (Direct Addressing)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_1.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오퍼랜드 필드에 연산에 사용할 데이터가 저장된 &lt;strong&gt;메모리의 실제 주소를 명시하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리에 한 번 접근하여 데이터를 가져오기 때문에 즉시 주소 방식보다는 느리다.&lt;/li&gt;
  &lt;li&gt;표현할 수 있는 데이터 크기가 즉시 방식보다 크다.&lt;/li&gt;
  &lt;li&gt;주소가 고정되어 있기 때문에 구조가 단순하지만 유연성은 낮다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;비유:&lt;/strong&gt; “100번지 서랍을 열어서 그 안에 든 것을 R1에 저장하라.” → 주소가 바로 주어지고, 거기서 값을 가져오는 방식이다.&lt;/p&gt;

&lt;h3 id=&quot;3-간접-주소-지정-방식-indirect-addressing&quot;&gt;3. 간접 주소 지정 방식 (Indirect Addressing)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오퍼랜드 필드에 연산에 사용할 데이터가 저장된 &lt;strong&gt;메모리 주소의 주소를 명시하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리를 두 번 접근해야 하기 때문에 직접 주소 방식보다 느리다.&lt;/li&gt;
  &lt;li&gt;표현할 수 있는 주소 공간이 넓기 때문에 유연성이 크다.&lt;/li&gt;
  &lt;li&gt;포인터나 동적 자료 구조에 자주 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;비유:&lt;/strong&gt; “100번지 서랍 안에 적힌 주소를 보고, 그 주소에 가서 값을 가져와라.”&lt;/p&gt;

&lt;p&gt;→ 주소를 한번 더 참조해야 하므로 한 단계 더 돌아가는 방식이다.&lt;/p&gt;

&lt;h3 id=&quot;4-레지스터-주소-지정-방식-register-addressing&quot;&gt;4. 레지스터 주소 지정 방식 (Register Addressing)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_3.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오퍼랜드 필드에 연산에 사용할 데이터를 담고 있는 &lt;strong&gt;레지스터의 이름(주소)를 명시하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 대신 레지스터를 사용하므로 접근 속도가 매우 빠르다.&lt;/li&gt;
  &lt;li&gt;레지스터 수가 제한되어 있어 데이터 표현 범위는 작다.&lt;/li&gt;
  &lt;li&gt;연산이 빈번하게 수행되는 변수나 임시 값 처리에 적합하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;비유:&lt;/strong&gt; “내 손에 들고 있는 계산기 메모리에서 바로 꺼내 써라.”&lt;/p&gt;

&lt;p&gt;→ 가까운 공간에서 바로 꺼내 쓰는 개념이다.&lt;/p&gt;

&lt;h3 id=&quot;5-레지스터-간접-주소-지정-방식-register-indirect-addressing&quot;&gt;5. 레지스터 간접 주소 지정 방식 (Register Indirect Addressing)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/operation/img_4.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오퍼랜드 필드에 &lt;strong&gt;데이터가 저장된 메모리 주소를 담고 있는 레지스터를 명시하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리에 한 번 접근하므로 간접 주소 지정 방식보다 빠르다.&lt;/li&gt;
  &lt;li&gt;주소를 유동적으로 관리할 수 있어 포인터 처리에 적합하다.&lt;/li&gt;
  &lt;li&gt;레지스터를 통해 메모리 주소를 간접적으로 다룰 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;비유:&lt;/strong&gt; “R2 레지스터에 적힌 주소를 보고, 해당 위치에서 값을 가져와라.”&lt;/p&gt;

&lt;p&gt;→ 주소가 적힌 쪽지를 들고 해당 장소에 가서 값을 가져오는 느낌이다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://m.yes24.com/Goods/Detail/111378840&quot;&gt;https://m.yes24.com/Goods/Detail/111378840&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 May 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cs/2025/05/01/Operating-system-03/</link>
        <guid isPermaLink="true">http://localhost:4000/cs/2025/05/01/Operating-system-03/</guid>
        
        <category>OS</category>
        
        
        <category>cs</category>
        
      </item>
    
      <item>
        <title>Golf - Jmeter를 이용한 회원조회 성능 테스트</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;주변에서 들어본 성능 테스트 도구로는 k6, nGrinder, JMeter가 있습니다.
JMeter를 선택하게 된 이유는 테스트 후 자동으로 생성되는 HTML 형식의 보고서는 성능 결과를 시각적으로 
빠르게 파악할 수 있게 해주며, 결과를 팀원들과 공유하거나 문서화하는 데도 유용합니다.&lt;/p&gt;

&lt;p&gt;또한 기존의 테스트 케이스뿐만이 아닌 실제 가상의 요청을 받아보며 
실제 서비스 운영 환경에서 여러 사용자가 동시에 요청을 보낼 때 시스템이 이를 얼마나 안정적으로 처리할 수 있는지를 검증하는 것이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;active-파일-다운로드&quot;&gt;Active 파일 다운로드&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jmeter.apache.org/download_jmeter.cgi&quot;&gt;https://jmeter.apache.org/download_jmeter.cgi&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 사이트에 접속해서 파일을 다운로드 받습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;homebrew&quot;&gt;Homebrew&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jmeter

&lt;span class=&quot;c&quot;&gt;# 실행&lt;/span&gt;
jmeter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Homebrew로 다운을 받으면 비교적 편해 저는 Homebrew로 다운을 받았습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-plan&quot;&gt;Test Plan&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_5.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 Test를 하나 만들어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_6.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_7.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_8.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;100명의 사용자 수(쓰레드 수) 세팅&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_9.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP HeaderManager에서 Content-Type을 지정해준 이유 Value는 application/json으로 설정합니다.&lt;/li&gt;
  &lt;li&gt;저는 사용자 조회를 Post로 설정했기 때문에 이와같이 설정을 하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_10.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Body Data도 설정해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_11.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_12.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_13.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;100명의 요청 평균 응답 시간은 &lt;strong&gt;2초&lt;/strong&gt;로, 웹 애플리케이션에서 정상적인 응답 속도에 비해 빠른 속도를 기록했습니다. &lt;strong&gt;최소 응답 시간&lt;/strong&gt;은 1초로, 대부분의 요청이 빠르게 처리되었음을 알 수 있습니다.&lt;/li&gt;
  &lt;li&gt;또한 AOP로 측정한 개별처리 요청 또한 2ms 평균 0.002초 정도의 처리속도를 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jmeter.apache.org/download_jmeter.cgi&quot;&gt;https://jmeter.apache.org/download_jmeter.cgi&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Apr 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2025/04/23/Golf-Spring-Project-02/</link>
        <guid isPermaLink="true">http://localhost:4000/project/2025/04/23/Golf-Spring-Project-02/</guid>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Golf - 테이블 설계</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;본격적인 코드 작성에 앞서, &lt;strong&gt;스크린골프 서비스 관리 플랫폼&lt;/strong&gt;의 도메인 설계를 어떻게 할지 고민해보았습니다. 
서비스의 요구사항을 바탕으로 필요한 도메인들을 정의하고, 그들 간의 관계를 설정하였습니다. 
이번 글에서는 이러한 설계를 어떻게 했는지 간략히 설명드리고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;도메인-설계의-시작&quot;&gt;도메인 설계의 시작&lt;/h2&gt;

&lt;p&gt;스크린골프 서비스는 사용자가 매장을 예약하고, 룸에서 골프를 즐기며, 그에 대한 결제 및 기록을 관리하는 시스템입니다. 
이를 위해서는 사용자의 정보뿐만 아니라 예약, 매장, 룸, 결제, 골프 기록 등 다양한 도메인들이 필요합니다. 
스크린골프 서비스 관리 플랫폼에서 필요한 도메인을 생각나는 대로 우선 도출해보았습니다.
가장 먼저 떠오른 것은 &lt;strong&gt;User&lt;/strong&gt;, &lt;strong&gt;Reservation&lt;/strong&gt;, &lt;strong&gt;Room&lt;/strong&gt;, &lt;strong&gt;Payment&lt;/strong&gt;, &lt;strong&gt;GolfRecord&lt;/strong&gt; 같은 핵심 도메인들이었습니다. 
사용자는 예약을 만들고, 예약은 특정 룸에서 이루어지며, 결제 정보와 골프 기록이 이에 연결되는 형태로 매우 직관적인 관계를 형성하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 당장 떠오르는 도메인은 여기까지였고, 실제 서비스를 만들기 위해서는 훨씬 더 많은 기능과 구조가 필요할 것이라 생각되었습니다. 
그래서 추가적인 도메인 구성을 바로 진행하기보다는, 실제 서비스에서는 어떤 기능들이 필요한지, 어떤 데이터가 오가고 관리되는지를 먼저 이해하려 했습니다.
확실히, &lt;strong&gt;도메인 지식이 부족한 상태에서는 테이블 구조의 확장도 한계가 있었고&lt;/strong&gt;, 
각 도메인이 어떤 기능을 제공해주는지에 대해 어느 정도 감을 잡아야 적절한 테이블을 설계할 수 있겠다는 생각이 들었습니다.
그래서 레퍼런스로 활용할 수 있는 실제 골프 관련 서비스들을 참고해보기로 했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;김캐디(https://kimcaddie.com/)&lt;/li&gt;
  &lt;li&gt;곤지암 골프클럽(https://www.konjiamgolfclub.co.kr/index.dev)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 사이트들을 참고하며 필요한 추가적인 도메인을 더 구체화할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_1.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: 매장을 의미하며, 여러 개의 룸과 리뷰, 이벤트, 공지사항 등을 포함할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StoreReview&lt;/strong&gt;, &lt;strong&gt;ReviewImage&lt;/strong&gt;: 사용자들이 매장을 평가하고, 이미지를 첨부할 수 있도록 구성됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StoreImage&lt;/strong&gt;: 매장 자체에 대한 이미지들을 따로 관리합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Event&lt;/strong&gt;, &lt;strong&gt;Notice&lt;/strong&gt;: 각 매장에서 주최하는 이벤트나 공지사항 정보를 담는 테이블입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RoomEquipment&lt;/strong&gt;: 룸 내 장비들을 관리하기 위한 테이블로, 각 룸은 여러 개의 장비를 포함할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hole&lt;/strong&gt;, &lt;strong&gt;Course&lt;/strong&gt;, &lt;strong&gt;HoleRecord&lt;/strong&gt;: 골프 게임의 기록을 위한 테이블들로, 실제 게임 진행에 대한 세부 정보들을 저장합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스크린골프 서비스는 사용자가 매장을 예약하고, 룸에서 골프를 즐기며, 그에 대한 결제 및 기록을 관리하는 시스템입니다. 
이를 위해서는 사용자의 정보뿐만 아니라 예약, 매장, 룸, 결제, 골프 기록 등 다양한 도메인들이 필요합니다. 
이러한 도메인 간의 관계를 설정하면서, 서비스가 유기적으로 작동할 수 있도록 설계하는 것이 중요합니다.
서비스의 핵심은 사용자가 여러 예약을 진행할 수 있다는 점입니다. 
각 예약은 하나의 사용자가 생성하며, 예약된 시간에 특정 룸을 이용하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;테이블-관계-설정&quot;&gt;테이블 관계 설정&lt;/h2&gt;

&lt;p&gt;스크린골프 서비스는 사용자 예약부터 룸 이용, 결제, 골프 기록 관리까지 여러 도메인이 서로 유기적으로 연결된 구조로 설계되었습니다. 
User와 Reservation(예약)은 1:N 관계로 설정하여, 사용자가 여러 번 예약을 할 수 있도록 하였습니다. 
각 예약은 반드시 한 사용자에 속하므로, 사용자는 자신이 만든 모든 예약을 조회할 수 있습니다.
Store(매장)과 Room(룸)은 1:N 관계로, 매장은 여러 룸을 가질 수 있으며, 이를 통해 매장 내 룸의 예약 현황을 효율적으로 관리할 수 있습니다. 
또한, Room(룸)과 Reservation(예약)도 1:N 관계로 설정하여 각 룸에 대한 예약 정보를 쉽게 조회할 수 있게 하였습니다.
Reservation(예약)과 Payment(결제)는 1:1 관계로 설계하여, 예약이 완료되면 해당 예약에 대한 결제를 바로 연결할 수 있도록 하였습니다. 
마찬가지로 Reservation과 GolfRecord(골프 기록)도 1:1 관계로, 각 예약에 대한 골프 기록을 정확히 추적할 수 있도록 하였습니다. 
골프 기록은 여러 개의 HoleRecord(홀 기록)을 포함할 수 있게 되어, 플레이한 홀에 대한 세부 기록을 관리할 수 있습니다.
HoleRecord(홀 기록)과 Hole(홀)은 N:1 관계로 설계하여, 여러 홀 기록이 하나의 홀에 속하게 하였고, 이는 각 홀에 대한 세부적인 데이터를 쉽게 추적할 수 있게 합니다. 
한편, Hole과 Course(코스)는 N:1 관계로 설정되어, 여러 홀이 하나의 코스를 형성하고, 코스별 홀 관리가 용이하도록 했습니다.
매장 관련 리뷰와 이미지를 관리하는 Store와 StoreReview(매장 리뷰), StoreReview와 ReviewImage(리뷰 이미지), 
Store와 StoreImage(매장 이미지)는 모두 1:N 관계로 설정하여, 
매장에 대한 다각적인 피드백과 시각적 정보를 제공하고 관리할 수 있게 하였습니다.
매장에 대한 공지사항과 이벤트도 Store와 Notice(공지사항), Store와 Event(이벤트) 간에 1:N 관계로 설정하여, 
매장과 관련된 정보를 체계적으로 관리하고, 매장별 이벤트 및 공지사항을 쉽게 조회할 수 있습니다.
마지막으로, Room(룸)과 RoomEquipment(룸 장비)는 1:N 관계로, 각 룸에 배치된 여러 장비들을 효율적으로 관리할 수 있도록 설계되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kimcaddie.com&quot;&gt;https://kimcaddie.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.konjiamgolfclub.co.kr/index.dev&quot;&gt;https://www.konjiamgolfclub.co.kr/index.dev&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Apr 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2025/04/20/Golf-Spring-Project-01/</link>
        <guid isPermaLink="true">http://localhost:4000/project/2025/04/20/Golf-Spring-Project-01/</guid>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>진격의 거인 문제</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;친구랑 진격의 거인 더 라스트 어택을 보고 감격을 받아서 코딩테스트 문제를 직접 만들었다.
(안본 사람은 꼭 보았으면 좋겠다.)&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cs/algorithm/moviealgorithm.png&quot; alt=&quot;moviealgorithm.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애렌의 땅울림 최단거리 에렌은 (0, 0) 위치의 파라디 섬에서 출발하여, 목표 지점 (y, x)까지 도달하여 땅울림을 실행하려 한다.
에렌은 1로 표시된 땅에서만 땅울림을 이어갈 수 있 고, 0으로 표시된 곳은 갈 수 없는 곳이다.
또한, 진격의 거인의 힘으로 인해 한 번 밟은 땅은 다 시는 되돌아갈 수 없다. 에렌이 목표 지점까지 이동할 수 있는 최단 거리를 구해보자. 만약 도달할 수 없다면
-1을 출력하자. (최단 거리 문제가 나오면 자동반사로 BFS 를 먼저 떠올리게 된다.)&lt;/p&gt;

&lt;h3 id=&quot;입력&quot;&gt;입력&lt;/h3&gt;

&lt;p&gt;N, M ≤ 1,000&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;출력&quot;&gt;출력&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FASTIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FASTIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 도달 불가&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;접근&quot;&gt;접근&lt;/h2&gt;

&lt;p&gt;이 문제는 2차원 맵 위에서 (0, 0) 지점에서 출발하여 (y, x) 지점까지 갈 수 있는지, 
그리고 도달할 수 있다면 그 최단 거리가 얼마인지 묻고 있다. 이동할 수 있는 곳은 값이 1인 지점뿐이고, 
한 번 밟은 땅은 다시는 밟을 수 없으므로 방문한 곳은 다시 가지 않도록 처리해야 한다. 
이러한 조건은 전형적인 너비 우선 탐색(BFS) 문제라는 것을 암시한다(자동 반사처럼 나와야 한다.)
BFS는 시작 지점에서부터 모든 방향으로 거리를 1씩 늘려가며 탐색하기 때문에,
어떤 지점에 가장 먼저 도달했을 때 그 거리가 곧 최단 거리라는 특징을 가진다. 
따라서 (0, 0)부터 시작해서 갈 수 있는 지점을 큐에 넣고, 
방문할 때마다 현재 거리 +1 값을 기록하면서 진행하면 된다. 
이를 위해 방문 여부와 동시에 거리를 저장할 visited 배열을 활용할 수 있다. 
만약 어떤 지점이 이미 방문된 상태라면, 다시 큐에 넣지 않고 건너뛰는 방식으로 처리하면 된다.
탐색을 진행하다가 현재 위치가 우리가 찾고자 하는 목표 지점 (y, x)에 도달했을 경우, 그 지점의 visited 값 -1 
시작점에서 1부터 시작했으므로)을 출력하고 탐색을 종료한다. 
만약 BFS가 종료될 때까지도 목표 지점에 도달하지 못했다면, 
이는 갈 수 없는 경우이므로 -1을 출력하면 된다.
또한 문제에서 자료구조를 큐를 사용한 이유는  BFS는 시작 지점에서부터 인접한 모든 지점을 먼저 방문하고, 
그 다음으로 더 먼 지점들을 방문해 나가는 방식이기 때문이다. 인접노드를 떠올리면 쉽다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Apr 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cs/2025/04/11/Algorithm-23/</link>
        <guid isPermaLink="true">http://localhost:4000/cs/2025/04/11/Algorithm-23/</guid>
        
        <category>Algorithm</category>
        
        
        <category>cs</category>
        
      </item>
    
      <item>
        <title>BIDMALL- auction_status_check - 01</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2025-04-17T20:59:50.504+09:00  WARN 56825 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;product_auction] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nio-8082-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 0, SQLState: 23514
2025-04-17T20:59:50.505+09:00 ERROR 56825 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;product_auction] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nio-8082-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : ERROR: new row &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;relation &lt;span class=&quot;s2&quot;&gt;&quot;auction&quot;&lt;/span&gt; violates check constraint &lt;span class=&quot;s2&quot;&gt;&quot;auction_status_check&quot;&lt;/span&gt;
  Detail: Failing row contains &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 2025-04-25 00:00:00, 0, null, null, null, 2025-04-20 00:00:00, null, 경매 설명, PENDING&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
2025-04-17T20:59:50.508+09:00  INFO 56825 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;product_auction] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nio-8082-exec-2] c.e.p.p.c.AuctionControllerImpl          : 경매 등록 실패&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;could not execute statement &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR: new row &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;relation &lt;span class=&quot;s2&quot;&gt;&quot;auction&quot;&lt;/span&gt; violates check constraint &lt;span class=&quot;s2&quot;&gt;&quot;auction_status_check&quot;&lt;/span&gt;
  Detail: Failing row contains &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 2025-04-25 00:00:00, 0, null, null, null, 2025-04-20 00:00:00, null, 경매 설명, PENDING&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; insert &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;com.example.product_auction.product.domain.Auction &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/insert into auction &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;description,end_time,highest_bid,start_time,status,winner_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; values &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?,?,?,?,?,?&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; SQL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; insert &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;com.example.product_auction.product.domain.Auction &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/insert into auction &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;description,end_time,highest_bid,start_time,status,winner_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; values &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?,?,?,?,?,?&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; constraint &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;auction_status_check]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;경매 시스템에서 상품을 등록하고 경매를 생성하는 과정에서, 요청 포맷에 맞게 데이터를 전달했음에도 불구하고, SQL 실행 중에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auction_status_check&lt;/code&gt; 제약 조건을 위반하는 오류가 발생했습니다. 이 오류는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 테이블에 데이터를 삽입할 때 발생했으며, 경매 상태를 지정하는 과정에서 잘못된 값이 전달된 것과 관련이 있을 수 있습니다.&lt;/p&gt;

&lt;p&gt;해당 &lt;a href=&quot;https://github.com/BidMall/product_auction/blob/main/src/main/java/com/example/product_auction/product/service/AuctionServiceImpl.java&quot;&gt;코드&lt;/a&gt;는 여기 링크에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-발생-경과&quot;&gt;문제 발생 경과&lt;/h2&gt;

&lt;p&gt;경매 등록 시, 클라이언트에서 다음과 같은 데이터 포맷으로 요청을 보냈습니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;시바견 간식&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;저희 대박이가 정말 좋아하는 간식입니다!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://example.com/image.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startPrice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sellerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;신제품 경매 시작!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-20T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-25T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버에서는 이 데이터를 받아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; 객체를 저장한 후, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 객체를 생성하여 저장하려 했습니다. 하지만 다음과 같은 에러 메시지가 발생했습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: new row for relation &quot;auction&quot; violates check constraint &quot;auction_status_check&quot;
Detail: Failing row contains (9, 2025-04-25 00:00:00, 0, null, null, null, 2025-04-20 00:00:00, null, 경매 설명, PENDING).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;원인-분석&quot;&gt;원인 분석&lt;/h2&gt;

&lt;p&gt;오류 메시지에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auction_status_check&lt;/code&gt; 제약 조건을 위반했다고 나옵니다. 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 테이블에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 필드가 특정 조건을 만족해야 한다는 제약을 의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 객체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 값이  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PENDING&lt;/code&gt;으로 설정되어 있지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 테이블에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 값에 대한 추가 제약 조건이 적용되어 있어 이 값을 삽입할 수 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auction&lt;/code&gt; 테이블의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 필드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PENDING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUCTIONING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMPLETED&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CANCELED&lt;/code&gt; 등의 상태 값만 허용되며, 이 값이 부적절하게 설정되었거나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 값이 제대로 설정되지 않아서 발생한 문제입니다.&lt;/p&gt;

&lt;h2 id=&quot;현재코드&quot;&gt;현재코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;상품 정보가 없습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEndTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuctionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PENDING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;highestBid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 경매 저장&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auctionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 응답 반환&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auctionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEndTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기존-코드-분석-및-문제점&quot;&gt;기존 코드 분석 및 문제점&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuctionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PENDING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 경매 상태&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음 경매를 생성할 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PENDING&lt;/code&gt; 상태로 하드코딩되어 있기 때문에, DB에서 허용하는 상태(enum 또는 check constraint에서 정의된 값)가 아닌 경우 오류가 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check constraint&lt;/code&gt;를 enum과 연결해 둘 경우, 지정된 값 외의 상태가 들어오면 다음과 같은 오류가 발생합니다.&lt;/p&gt;

&lt;h2 id=&quot;리팩토링&quot;&gt;리팩토링&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;상품 정보가 없습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 상품 등록&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEndTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuctionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ONGOING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;highestBid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auctionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterAuctionResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auctionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEndTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedAuction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;경매를 처음 생성하고 등록할 때는 서버에게 상태값을 할당하도록 설계했습니다. 
클라이언트가 직접 경매 상태를 지정하는 방식은 다양한 예외 상황을 유발할 수 있었기 때문에, 
&lt;strong&gt;경매 등록 시 상태값은 서버에서 자동으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONGOING&lt;/code&gt;으로 설정&lt;/strong&gt;되도록 리팩토링을 진행했습니다.&lt;/p&gt;

&lt;p&gt;Respuest.JSON&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;시바견 간식&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;저희 대박이가 정말 좋아하는 간식입니다!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startPrice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WAITING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sellerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;신제품 경매 시작!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-20T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-25T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Response.JSON&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auctionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;시바견 간식&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;저희 대박이가 정말 좋아하는 간식입니다!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startPrice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WAITING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sellerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;createdAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-17T21:10:25.992515&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auctions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;신제품 경매 시작!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-20T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2025-04-25T00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ONGOING&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 등록된 것을 확인이 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Apr 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2025/04/01/BidMall-Spring-Project-01/</link>
        <guid isPermaLink="true">http://localhost:4000/project/2025/04/01/BidMall-Spring-Project-01/</guid>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>profit- Spring Batch 적용기</title>
        <description>&lt;h2 id=&quot;한국수출입은행-open-api-발급-방법&quot;&gt;한국수출입은행 Open API 발급 방법&lt;/h2&gt;

&lt;p&gt;Open API는 개발된 공공데이터를 누구나 사용할 수 있도록 공개된 API(Application Program Interface)를 말합니다. 저는 여러 나라의 환율정보를 실시간으로 제공해줘야하기 때문에 SpringBatch를 선택했고, API는 한국수출입은행 API를 활용하였습니다. 하기의 링크에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.koreaexim.go.kr/ir/HPHKIR019M01&quot;&gt;https://www.koreaexim.go.kr/ir/HPHKIR019M01&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;open-api-개발명세&quot;&gt;Open API 개발명세&lt;/h3&gt;

&lt;h3 id=&quot;1-요청-url-request-url--요청변수&quot;&gt;1. 요청 URL (Request URL) + 요청변수&lt;/h3&gt;

&lt;p&gt;요청 URL (Request URL) + authkey (인증키) + searchdate (검색요청날짜) + data (검색요청 API타입)&lt;/p&gt;

&lt;h2 id=&quot;exchangedtojava&quot;&gt;ExchangeDto.java&lt;/h2&gt;

&lt;p&gt;한국수출입은행 환율정보 API 호출 시 출력결과로 나오는 변수들을 객체로 생성하기 위한 파일을 생성하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.profitkey.stock.dto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.ToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ToString&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 결과&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 통화코드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 국가/통화명 &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 국가/통화명&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 전신환(송금) 보내실 때&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 매매 기준율&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deal_bas_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 장부가격&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bkpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 년환가료율&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yy_efee_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 년환가료율&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten_dd_efee_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 서울외국환중개 매매기준율&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kftc_bkpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;// 서울외국환중개 매매기준율&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kftc_deal_bas_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exchangeutilsjava&quot;&gt;ExchangeUtils.java&lt;/h2&gt;

&lt;p&gt;배치에 사용될 내 로직 내 기능을 독립적으로 구성했습니다.&lt;/p&gt;

&lt;h3 id=&quot;utilutils-클래스패키지-란-무엇인가요&quot;&gt;Util(Utils) 클래스/패키지 란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExchangeUtils.java&lt;/code&gt;는 배치 처리 로직에서 사용하는 여러 기능들을 독립적으로 구성한 클래스입니다. 이런 유틸리티 클래스는 일반적으로 전역적으로 재사용 가능한 로직을 담는 용도로 사용됩니다. 예를 들어 문자열 처리, 날짜 및 시간 계산, 형 변환 등의 기능처럼 특정 도메인이나 비즈니스 로직과는 무관한, 순수한 기능 중심의 메서드들을 담습니다. 이러한 메서드들은 대부분 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt;으로 선언되어 객체 생성 없이도 호출할 수 있어 간편하게 사용할 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;처음에는 외부 API를 호출하는 로직도 이러한 Util 패키지에 모아두는 방식으로 설계했습니다. 실제로 API 요청은 단순한 HTTP 호출일 때가 많고, 여러 서비스에서 재사용되기도 하니 Util 클래스에 넣는 것이 그럴듯해 보일 수 있습니다. 하지만 여러 기술 블로그나 개발자 커뮤니티의 논의들을 살펴보면, &lt;strong&gt;API 호출은 단순한 기능처럼 보여도 실제로는 비즈니스 로직과 밀접하게 연결되는 경우가 많기 때문에 Util 클래스보다는 Service 계층에 두는 것이 바람직하다&lt;/strong&gt;는 의견이 많습니다. 특히 API 호출 결과에 따라 다른 처리를 하거나, 실패 시의 예외 처리, 재시도 로직, 인증 토큰 갱신 등의 로직이 붙기 시작하면 더 이상 단순한 ‘기능’이 아니게 됩니다.&lt;/p&gt;

&lt;p&gt;저 역시 이러한 고민 끝에 API 관련 코드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Util&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt; 계층으로 옮기는 방향을 고려하고 있습니다. 만약 여러분도 Util 패키지에 넣은 로직이 점점 복잡해지고 있다면, &lt;strong&gt;그 기능이 진짜 ‘도메인 독립적’인지&lt;/strong&gt; 한 번쯤 다시 점검해보시길 추천드립니다. 기술적으로 가능한 구조보다는, 의미상 자연스럽고 유지보수하기 쉬운 구조를 선택하는 것이 장기적으로 더 좋은 설계로 이어질 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;getsearchdate&quot;&gt;getSearchdate()&lt;/h3&gt;

&lt;p&gt;주말(토요일, 일요일) 에는 환율 정보가 들어오지 않습니다. 파라미터에 값을 설정하기 위하여 토요일, 일요일 모두 금요일로 설정하도록 하는 함수입니다. 특정 조건들을 추가하여 특정 일자를 호출하고 싶다면 이 메서드에서 수정하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSearchdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DayOfWeek&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfWeek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 토요일if (dayOfWeek.getValue() == 6)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 일요일if (dayOfWeek.getValue() == 7)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-key-&quot;&gt;@Value(“${– KEY –}”)&lt;/h3&gt;

&lt;p&gt;properties 파일에 작성한 값을 키(명칭)를 통해 가져옵니다. 해당 어노테이션을 통해 작성한 변수에 값을 부여합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${exchange-authkey}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${exchange-data}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getexchangedatasync&quot;&gt;getExchangeDataSync()&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open API 개발명세의 (Request URL) + 요청변수 형식을 구성하여 Get 방식을 사용하였습니다.&lt;/li&gt;
  &lt;li&gt;WebClient를 사용하여 외부 API를 호출할 땐 인코딩을 주의해야 합니다.&lt;/li&gt;
  &lt;li&gt;DefaultUriBuilderFactory 객체를 생성하여 인코딩 모드를 None으로 변경하고 이를 아래와 같이 WebClient에 적용했습니다.&lt;/li&gt;
  &lt;li&gt;queryParam을 사용할 때, API를 WebClient로 호출하기 위해서 인코딩을 하지 않도록 처리하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExchangeDataSync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEncodingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EncodingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www.koreaexim.go.kr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/site/program/financial/exchangeJSON&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authkey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;searchdate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 동기적으로 결과를 얻음return parseJson(responseBody);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parsejsonstring-responsebody&quot;&gt;parseJson(String responseBody)&lt;/h3&gt;

&lt;p&gt;getExchangeDataSync()에서 가져온 결과 값 (String responseBody)을 Json 형식으로 나타내기 위한 작업입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 예외 처리 필요&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exchageutilsjava&quot;&gt;ExchageUtils.java&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.main.exchangeBatch.utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.core.JsonProcessingException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.databind.JsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.main.exchangeBatch.dto.ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.RequiredArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.util.DefaultUriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.DayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.format.DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${exchange-authkey}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${exchange-data}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSearchdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExchangeDataSync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEncodingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DefaultUriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EncodingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// WebClient를 생성합니다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uriBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// WebClient를 사용하여 동기적으로 데이터를 요청하고, 바로 parseJson 함수를 호출합니다.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www.koreaexim.go.kr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/site/program/financial/exchangeJSON&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authkey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;searchdate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 동기적으로 결과를 얻음return parseJson(responseBody);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 예외 처리 필요&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExchangeDataAsDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getExchangeDataSync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDtoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertJsonToExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exchangeDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertJsonToExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;treeToValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsonProcessingException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 예외 처리 필요&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSearchdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;DayOfWeek&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfWeek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 토요일if (dayOfWeek.getValue() == 6)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 일요일if (dayOfWeek.getValue() == 7)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exchangebatchjava&quot;&gt;ExchangeBatch.java&lt;/h2&gt;

&lt;p&gt;배치에 대한 비즈니스 로직을 담은 파일입니다. 간단한 배치 예제이기 때문에, 비교적 Chunk 방식보다 가벼운 Tasklet 방식으로 구성하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;exchangebatchjava---전체-코드&quot;&gt;ExchangeBatch.java - 전체 코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.main.exchangeBatch.batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.main.exchangeBatch.dto.ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.main.exchangeBatch.utils.ExchangeUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.Step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.job.builder.JobBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.repository.JobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.step.builder.StepBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.step.tasklet.Tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.repeat.RepeatStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.PlatformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeBatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExchangeUtils&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exchangeJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JobRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exchangeJob&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JobRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tasklet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StepBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;step&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tasklet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDtoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExchangeDataAsDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExchangeDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;통화 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCur_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;환율 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchangeDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeal_bas_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 추가적인 필드가 있다면 출력 또는 활용&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RepeatStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FINISHED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;트러블-슈팅&quot;&gt;트러블 슈팅&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parameter 1 of constructor &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;com.profitkey.stock.handler.BatchScheduler required a single bean, but 2 were found:
	- createStockInfoJob: defined by method &lt;span class=&quot;s1&quot;&gt;&apos;createStockInfoJob&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;class path resource &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;com/profitkey/stock/config/BatchConfig.class]
	- exchangeJob: defined by method &lt;span class=&quot;s1&quot;&gt;&apos;exchangeJob&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;class path resource &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;com/profitkey/stock/handler/ExchangeBatchConfig.class]

This may be due to missing parameter name information

Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed

Ensure that your compiler is configured to use the &lt;span class=&quot;s1&quot;&gt;&apos;-parameters&apos;&lt;/span&gt; flag.
You may need to update both your build tool settings as well as your IDE.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;See https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Disconnected from the target VM, address: &lt;span class=&quot;s1&quot;&gt;&apos;127.0.0.1:53621&apos;&lt;/span&gt;, transport: &lt;span class=&quot;s1&quot;&gt;&apos;socket&apos;&lt;/span&gt;

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Description:

Parameter 1 of constructor &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;com.profitkey.stock.handler.BatchScheduler required a single bean, but 2 were found:
	- createStockInfoJob: defined by method &lt;span class=&quot;s1&quot;&gt;&apos;createStockInfoJob&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;class path resource &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;com/profitkey/stock/config/BatchConfig.class]
	- exchangeJob: defined by method &lt;span class=&quot;s1&quot;&gt;&apos;exchangeJob&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;class path resource &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;com/profitkey/stock/handler/ExchangeBatchConfig.class]

This may be due to missing parameter name information

Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 오류는 BatchScheduler 클래스에서 Job 타입의 빈을 주입받을 때, createStockInfoJob과 exchangeJob 두 개의 Job 빈이 존재해서 Spring이 어떤 빈을 주입할지 모르기 때문에 발생하는 문제입니다.
SpringBean 충돌로 bean name을 지정해서 충돌이 발생하지 않게 분리
코드에서 Bean name을 설정하여 exchangeJob을 기본 빈으로 설정하면 
두 Job(exchangeJob과 createStockInfoJob)이 동일한 타입(Job)으로 등록되어 있을 때, Spring이 어떤 빈을 주입해야 할지 결정하지 못해 발생하는 충돌을 방지합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_3.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/projects/golf/img_4.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그에 잘 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;실행-결과&quot;&gt;실행 결과&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-batch/reference/step/chunk-oriented-processing/restart.html&quot;&gt;https://docs.spring.io/spring-batch/reference/step/chunk-oriented-processing/restart.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Mar 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2025/03/24/profit-Spring-Project-01/</link>
        <guid isPermaLink="true">http://localhost:4000/project/2025/03/24/profit-Spring-Project-01/</guid>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>spring cloud 개요</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/spring/img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;api-게이트웨이란&quot;&gt;API 게이트웨이란&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API 게이트웨이(패턴) 는 마이크로서비스 관리 / 운영을 위한 플랫폼 패턴이며 해당 패턴에 필요한 기능들을 제공하는 서버를 일컫는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;API 게이트웨이는 개별 서비스의 앞 단에서 모든 서비스들의 엔드포인트를 단일화하고 다음과 같은 필수 기능 요소들을 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;인증과 인가&lt;/strong&gt; : 모든 서비스들에 대한 접근에 있어서 단일 진입점에서 인증과 인가 처리를 진행&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API 요청 로드밸런싱 및 라우팅&lt;/strong&gt; : API 요청을 식별하여 적절한 마이크로서비스로 전달&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QoS(Quality of Service)&lt;/strong&gt; : 안정적인 서비스 제공 및 네트워크 품질을 관리하며 사용자 / 클라이언트 / API 단위로 접속 제어&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;로깅 및 모니터링&lt;/strong&gt; : API 요청에 대한 로깅 / 모니터링 기능 지원&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;입력 유효성 검사&lt;/strong&gt; : API 요청의 적절한 형식과 필수 데이터 포함 여부를 식별 및 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;api-게이트웨이를-왜-쓸까&quot;&gt;API 게이트웨이를 왜 쓸까?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션 내부 구조를 캡슐화
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 특정 서비스를 호출하지 않고 단순히 게이트웨이와 통신하며 API 게이트웨이는 각 종류의 클라이언트 각 종류의 클라이언트에 특정 API를 제공한다.&lt;/li&gt;
      &lt;li&gt;클라이언트와 애플리케이션의 왕복 횟수가 감소한다. 클라이언트 코드는 최소화 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;장점이-있으면-단점도-있다&quot;&gt;장점이 있으면 단점도 있다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;개발, 배포 및 관리해야 하는 지점이 증가&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;각 마이크로서비스의 Endpoint를 노출하기 위해 API 게이트웨이를 업데이트해야 하는데 이로 인해 &lt;strong&gt;개발 병목 현상이 발생할 수 있다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 단점이 있음에도 장점이 뚜렷하기 때문에 오늘날 마이크로서비스 아키텍처에서 API 게이트웨이는 반드시 필요한 요소로 존재하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;applicationyaml-예시&quot;&gt;application.yaml 예시&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host_taewoo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://host-taewoo.com&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;predicates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Host=host-taewoo.com&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# host-taewoo.com을 Host의 헤더로 요청이 들어오는 경우 해당 uri로 라우팅&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cookie_taewoo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://cookie-taewoo.com&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;predicates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Cookie=TAEWOO_SES, ej*&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TAEWOO_SES ej* 정규식에 매칭되는 TAEWOO_SES 쿠키로 요청이 들어오는 경우 해당 uri로 라우팅&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path_taewoo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://path-taewoo.com&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;predicates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Path=/hello/{path}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# /hello/{path} 경로로 요청이 들어오는 경우 해당 uri로 라우팅&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-gateway/reference/html&quot;&gt;https://cloud.spring.io/spring-cloud-gateway/reference/html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Mar 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/03/01/Spring-Cloud-01/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/03/01/Spring-Cloud-01/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>네이버 Java 코딩 컨벤션 적용</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;프로젝트를 하면서 컨벤션을 적용하지 않고, merge를 요청 했다가 팀원분이 컨벤션이 적용되지 않은 코드라서 컨벤션 적용 후 다시 merge를 해달라는 요청을 받았다.
해당 프로젝트에서는 Naver 코딩 컨벤션을 적용하고 있었고, 큰 기업들에서는 각각의 코드 스타일에 맞게 컨벤션을 제공해주고 있음을 알 수 있었다.
코딩 컨벤션이란 가독성이 좋고 관리하기 쉬운 코드를 작성하기 위한 코딩 스타일 규악을 말한다.
컨벤션에 대한 xml 파일은 아래의 링크에서 확인이 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;naver-checkstyle-rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-rules.xml&quot;&gt;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-rules.xml&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;naver-intellij-formatter.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-intellij-formatter.xml&quot;&gt;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-intellij-formatter.xml&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;naver-surpression.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-suppressions.xml&quot;&gt;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-suppressions.xml&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;컨벤션-적용&quot;&gt;컨벤션 적용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;File → Settings → Tools에서 Checkstyle 항목을 선택한다.&lt;/li&gt;
  &lt;li&gt;Scan scope를 All sources including tests로 설정한다.&lt;/li&gt;
  &lt;li&gt;Treat Checkstyle errors as warnings를 체크한다.&lt;/li&gt;
  &lt;li&gt;Configuration File에서 + 버튼을 클릭한다.&lt;/li&gt;
  &lt;li&gt;Description은 Naver Checkstyle Rules으로 지정하는 것이 권장되지만 프로젝트별로 커스터마이징 했다면 프로젝트 이름 등을 붙인다.&lt;/li&gt;
  &lt;li&gt;Use a Local Checkstyle File을 선택하고 Browse 버튼을 눌러서 naver-checkstyle-rules.xml를 지정하고 Next 버튼을 누른다.&lt;/li&gt;
  &lt;li&gt;suppressionFile 변수를 설정하라는 창이 뜨면 Value에 &lt;strong&gt;naver-checkstyle-suppressions.xml&lt;/strong&gt;를 입력하고 Next 버튼을 누른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컨벤션을 적용하면 이와같이 checkstyle error를 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-rules.xml&quot;&gt;https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-checkstyle-rules.xml&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Feb 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/language/2025/02/05/Spring-convention/</link>
        <guid isPermaLink="true">http://localhost:4000/language/2025/02/05/Spring-convention/</guid>
        
        <category>java</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>Linux - System call</title>
        <description>&lt;h2 id=&quot;컴퓨터-시스템-구조&quot;&gt;컴퓨터 시스템 구조&lt;/h2&gt;

&lt;p&gt;하드웨어는 CPU, Memory, Storage, Peripherals 등으로 구성이 된다.
운영체제는 이러한 하드웨어를 운영 관리하는 시스템 소프트웨어이며 유닉스/리눅스의 경우 kernel이 하드웨어를 운영 관리하여 서비스를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/f9097c9f-4c45-4238-a920-22475c2ea21d&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스 관리
    &lt;ul&gt;
      &lt;li&gt;여러 개의 응용 프로그램이 실행될 수 있도록 프로세스들을 스케줄링하여 동시에 수행되는 것처럼 보이는 효과를 낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 관리
    &lt;ul&gt;
      &lt;li&gt;디스크와 같은 저장장치 상에 파일 시스템을 구성하여 파일을 관리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메모리 관리
    &lt;ul&gt;
      &lt;li&gt;메인 메모리가 효과적으로 사용될 수 있도록 관리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주변장치 관리
    &lt;ul&gt;
      &lt;li&gt;모니터, 키보드, 마우스 같은 장치를 사용할 수 있도록 관리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;응용 프로그램은 실행하는 중에 운영체제의 서비스가 필요할 때마다 시스템 호출을 통하여 운영체제에 서비스를 요청한다.&lt;/p&gt;

&lt;h2 id=&quot;system-call&quot;&gt;System Call&lt;/h2&gt;

&lt;p&gt;시스템 호출(System Call)은 운영 체제가 제공하는 서비스에 대한 프로그래밍 인터페이스이다. 
응용 프로그램은 시스템 호출을 통해 필요할 때마다 커널에 서비스를 요청하며 결과적으로 시스템 호출은 응용 프로그램과 커널 사이의 인터페이스 역할을 한다.
응용 프로그램에서 파일을 사용하기 위해서는 파일에 직접 접근할 수 없으며 반드시 커널에 파일에 대한 서비스 예를 들면 파일 열기, 읽기, 쓰기 등을 요청해야 한다.
커널은 이러한 서비스 요청을 받으면 요청에 따라 
파일 열기, 읽기, 쓰기 등을 수행한 후 결과를 응용 프로그램에게 돌려준다.
응용 프로그램은 사용자 모드(user mode)에서 실행하다가 시스템 호출을 하면 커널 모드(kernel mode)로 이동하여 커널 내의 코드를 실행한 후 다시 사용자 모드로 돌아온다. 
사용자 모드에서는 실행할 수 있는 기계어 명령어에 제한이 있지만 커널 모드에서는 어떠한 기계어 명령어도 실행이 가능하다. 
사용자 모드에서 실행중인 프로세스를 사용자 프로세스, 커널 모드로 실행중인 프로세스를 커널 프로세스라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;시스템-호출-동작&quot;&gt;시스템 호출 동작&lt;/h2&gt;

&lt;p&gt;사용자 프로세스에서 만약에 open() 시스템을 호출을 하면 C실행시간 라이브러리(C runtime library)를 통해 커널내의 해당 코드로 점프하게 된다. 
C 실행시간 라이브러리에서는 커널로 점프하기 위해 필요한 작업을 미리 하는데 가장 대표적인 일이 레지스터를 통해 매개변수를 전달한다. 
그 후에 trap명령으를 이용해 커널로 점프하고 각 시스템 호출의 시작 주소를 저장하고 있는 벡터 테이블을 통해 해당 시스템 호출의 커널 코드로 점프하게 된다. 
이후 해당 커널 코드를 실행후 호출의 역순으로 값을 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/d0cc3dcf-8bd2-445d-9e20-3ed01602cd5e&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예를들어 read(fd, buff, len) 함수는 파일 디스크립터로부터 데이터를 읽어서 버퍼에 저장한다.
Application이 Kernel에게 메시지를 read라는 메시지를 fd, buff, len을 담아 보내고 Kernel이 메시지에 대한 응답을 하게되어있다. 
이 예시는 read()에서의 예시이지만 다양한 커널이 인터페이스화를 통해 각 시스템 호출단에서의 제공을 해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fd(파일 디스커럽터)
    &lt;ul&gt;
      &lt;li&gt;읽을 파일을 식별하는 정수이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;buff
    &lt;ul&gt;
      &lt;li&gt;데이터를 읽어 저장할 메모리 공간이다. 이 매개변수는 char, void*로 전달이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;len
    &lt;ul&gt;
      &lt;li&gt;읽을 최대 바이트 수이다. 이 값만큼 데이터를 읽어오며, 실제 읽은 데이터 크기는 read함수가 반환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예시코드&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;linux/fs.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;linux/uaccess.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;linux/kernel.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;linux/types.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sys_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBADF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMODE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBADF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfs_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리눅스 커널에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_read()&lt;/code&gt; 시스템 호출을 처리하는 함수의 구현이다. 
이 함수는 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;를 호출할 때 파일 디스크립터로부터 데이터를 읽어와 사용자 공간에 복사하고 읽은 바이트 수를 반환한다.
먼저, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fget(fd)&lt;/code&gt;로 파일을 찾고, 해당 파일이 읽기 모드인지 확인한다. 읽기 모드가 아니면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-EBADF&lt;/code&gt; 오류를 반환한다. 
그런 다음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vfs_read()&lt;/code&gt;를 호출하여 파일에서 데이터를 읽고, 읽은 바이트 수를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes_read&lt;/code&gt;에 저장한다. 
마지막으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fput(file)&lt;/code&gt;로 파일을 닫고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytes_read&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://linux-kernel-labs.github.io/refs/heads/master/lectures/syscalls.html&quot;&gt;https://linux-kernel-labs.github.io/refs/heads/master/lectures/syscalls.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2025/01/23/Linux-basic-02/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2025/01/23/Linux-basic-02/</guid>
        
        <category>Linux</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Linux - ifconfig를 누르면?</title>
        <description>&lt;h2 id=&quot;ifconfig&quot;&gt;ifconfig&lt;/h2&gt;

&lt;p&gt;항상 ifconfig를 치는 이유는 해당 ip를 이용하여 외부에서 접속하기 위해서 치게되는 것 같다. 그리고 아이피를 찾고 외부에서 연동하는 것 말고는 딱히 쓰임을 중요하게 여기지 않았던 것 같은데 나머지 외의 정보들은 어떤 정보들을 포함하고 있는 것인지, ifconfig를 통해서 또 알 수 있는 것은 무엇일지 궁금했다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/caa2d485-c726-46f9-aeb0-c4b44b39217b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ifconfig를 입력하게 되면 해당 IP들을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;인터페이스-이름&quot;&gt;인터페이스 이름&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스의 이름은 cali0c3d08ee2e4이다.&lt;/li&gt;
  &lt;li&gt;이 부분은 네트워크 인터페이스의 이름이다. 예를 들어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lo&lt;/code&gt; 등과 같은 네트워크 장치 이름이 나타날 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cali&lt;/code&gt;로 시작하는 이름은 보통 Kubernetes 환경에서 사용하는 CNI(Container Network Interface) 플러그인 관련 인터페이스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flags&quot;&gt;flags&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;4163&amp;lt;UP, BORADCAST, RUNNING, MULTICAST&amp;gt;&lt;/li&gt;
  &lt;li&gt;네트워크 인터페이스의 상태를 나타낸다. 각 플래그는 다음과 같은 의미를 가진다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;UP&lt;/strong&gt;: 인터페이스가 활성화되어 있음을 나타낸다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;BROADCAST&lt;/strong&gt;: 브로드캐스트를 지원하는 인터페이스이다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;RUNNING&lt;/strong&gt;: 인터페이스가 현재 운영 중임을 나타낸다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MULTICAST&lt;/strong&gt;: 멀티캐스트를 지원하는 인터페이스이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mtu&quot;&gt;MTU&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;mtu 1480&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MTU (Maximum Transmission Unit)&lt;/strong&gt;: 한 번에 전송할 수 있는 최대 데이터 크기이다.. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1480&lt;/code&gt;은 이 인터페이스에서 한 번에 전송할 수 있는 최대 데이터 패킷 크기를 나타낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mac-주소&quot;&gt;MAC 주소&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ether ee:ee:ee:ee:ee:ee&lt;/li&gt;
  &lt;li&gt;이 부분은 인터페이스의 &lt;strong&gt;MAC 주소&lt;/strong&gt;를 나타낸다. MAC 주소는 하드웨어 고유의 식별자이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tx-queue-length&quot;&gt;TX Queue Length&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;txqueuelen 1000&lt;/li&gt;
  &lt;li&gt;전송 대기열 길이이다. 전송 대기열은 전송해야 할 패킷을 저장하는 공간으로, 이 값이 크면 더 많은 패킷을 대기시킬 수 있다.
    &lt;ul&gt;
      &lt;li&gt;전송 대기열은 큐를 통해 구현이 되어있는 것을 알 수 있었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rx-receive-및-tx-transmit-패킷-및-바이트&quot;&gt;RX (Receive) 및 TX (Transmit) 패킷 및 바이트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RX packets&lt;/strong&gt;: 수신된 패킷의 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RX bytes&lt;/strong&gt;: 수신된 데이터의 크기 (바이트 단위).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TX packets&lt;/strong&gt;: 전송된 패킷의 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TX bytes&lt;/strong&gt;: 전송된 데이터의 크기 (바이트 단위).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;오류-및-드롭된-패킷&quot;&gt;오류 및 드롭된 패킷&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RX errors&lt;/strong&gt;: 수신 중 발생한 오류의 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RX dropped&lt;/strong&gt;: 수신한 패킷이 드롭된 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TX errors&lt;/strong&gt;: 전송 중 발생한 오류의 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TX dropped&lt;/strong&gt;: 전송된 패킷이 드롭된 수.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기타-정보&quot;&gt;기타 정보&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;overruns&lt;/strong&gt;: 패킷이 인터페이스의 버퍼를 초과하여 처리되지 못한 경우의 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;frame&lt;/strong&gt;: 프레임 오류 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;carrier&lt;/strong&gt;: 네트워크 케이블이 연결되지 않았거나, 통신에 문제가 있는 경우 발생하는 오류 수.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;collisions&lt;/strong&gt;: 두 장치가 동시에 데이터를 전송하여 충돌이 발생한 횟수.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다른-인터페이스들&quot;&gt;다른 인터페이스들&lt;/h3&gt;

&lt;h3 id=&quot;eth0-eth1-lo-tunl0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tunl0&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;eth0, eth1&lt;/strong&gt;: 물리적 네트워크 인터페이스 카드(PNIC)이다. 주로 서버의 이더넷 인터페이스로, 각각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.140.169&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.10&lt;/code&gt; IP 주소를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lo&lt;/strong&gt;: &lt;strong&gt;Loopback 인터페이스이다&lt;/strong&gt;. 내부 테스트나 연결을 위해 사용되며, 항상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; IP 주소를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tunl0&lt;/strong&gt;: &lt;strong&gt;터널 인터페이스&lt;/strong&gt;로, IPIP 터널을 통해 다른 네트워크와 연결될 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip-주소&quot;&gt;IP 주소&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;inet&lt;/strong&gt;: 해당 인터페이스에 할당된 &lt;strong&gt;IPv4 주소이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inet 172.16.140.169&lt;/code&gt;와 같은 형식으로 나타난다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inet6&lt;/strong&gt;: 해당 인터페이스에 할당된 &lt;strong&gt;IPv6 주소이다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E38901_01/html/E38894/ipconfig-141.html&quot;&gt;https://docs.oracle.com/cd/E38901_01/html/E38894/ipconfig-141.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2025/01/22/Linux-basic-01/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2025/01/22/Linux-basic-01/</guid>
        
        <category>Linux</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Kubernetes - 파드와 디플로이먼트 차이</title>
        <description>&lt;h2 id=&quot;파드와-디플로이먼트는-무슨-차이가-있을까&quot;&gt;파드와 디플로이먼트는 무슨 차이가 있을까?&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/018405f8-897b-4298-bd29-7bca900f315f&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run과 create deployment로 파드를 생성하는 것은 무슨차이가 있을까?&lt;/li&gt;
  &lt;li&gt;run으로 파드를 생성하면 단일 파드 1개만 생성되고 관리된다. 그리고 create deployment로 파드를 생성하면 디플로이먼트(deployment)라는 관리 그룹 내에서 파드가 생성된다. 비유를 들자면, run으로 생성한 파드는 초코파이 1개이고, create deployment로 생성한 파드는 초코파이 상자에 들어있는 초코파이 1개가 된다.&lt;/li&gt;
  &lt;li&gt;kubectl run은 사실 테스트 목적으로 자주사용된다. 그냥 간편한 목적으로 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;디플로이먼트로-배포하기&quot;&gt;디플로이먼트로 배포하기&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl create deployment deploy-nginx &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx
deployment.apps/deploy-nginx created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl get pods
NAME                            READY   STATUS    RESTARTS   AGE
deploy-nginx-74d7d6d848-jz428   1/1     Running   0          19s
nginx                           1/1     Running   0          74m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;파드가 한개만 있을 수 있는 것은 아니기 때문에 hash 코드를 이용해서 랜덤하게 고유 이름을 지정해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl get pods &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME                            READY   STATUS    RESTARTS   AGE    IP               NODE     NOMINATED NODE   READINESS GATES
deploy-nginx-74d7d6d848-jz428   1/1     Running   0          114s   172.16.132.1     w3-k8s   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx                           1/1     Running   0          75m    172.16.103.129   w2-k8s   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# curl 172.16.132.1
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
html &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; color-scheme: light dark&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
body &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; width: 35em&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; margin: 0 auto&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://nginx.org/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://nginx.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;여러개-배포한다면서-왜-하나만-배포되는가&quot;&gt;여러개 배포한다면서 왜 하나만 배포되는가?&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/84135c3f-13c7-4b35-b0cc-3f8cff24bc8a&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러개를 배포하기 위해서는 내부에 레플리카 셋이라는 것에 대한 도움을 받아야 한다.&lt;/li&gt;
  &lt;li&gt;예를 들어 파드를 3개 만들겠다고 레플리카셋에 선언함녀 컨트롤러 매니저와 스케줄러가 워커 노드에 파들 3개를 만들도록 선언한다. 그러나 레플리카셋은 파드 수를 보장하는 기능만 제공하기 때문에 롤링 업데이트 기능 등이 추가된 디플로이먼트를 사용해 파드 수를 관리하기를 권장한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl scale deployment deploy-nginx &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
deployment.apps/deploy-nginx scaled
root@cp-k8s:~# 
root@cp-k8s:~# 
root@cp-k8s:~# kubectl get pods
NAME                            READY   STATUS              RESTARTS   AGE
deploy-nginx-74d7d6d848-jz428   1/1     Running             0          5m51s
deploy-nginx-74d7d6d848-rzptz   1/1     Running             0          6s
deploy-nginx-74d7d6d848-zts8t   1/1     Running             0          6s
nginx                           1/1     Running             0          79m
root@cp-k8s:~# 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/containers/what-is-kubernetes&quot;&gt;https://www.redhat.com/ko/topics/containers/what-is-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/kubernetes-engine?hl=ko&quot;&gt;https://cloud.google.com/kubernetes-engine?hl=ko&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;a href=&quot;https://www.openmaru.io/%ea%b5%ac%ea%b8%80%ea%b3%bc-%ec%bf%a0%eb%b2%84%eb%84%a4%ed%8b%b0%ec%8a%a4/&quot;&gt;https://www.openmaru.io/구글과-쿠버네티스/&lt;/a&gt;&amp;gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2025/01/21/Kubernetes-basic-10/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2025/01/21/Kubernetes-basic-10/</guid>
        
        <category>k8s</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Kubernetes - 파드를 외부에서 접속</title>
        <description>&lt;h2 id=&quot;외부에서-접속하게-하려면&quot;&gt;외부에서 접속하게 하려면?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;서비스(SVC)&lt;/strong&gt;는 Kubernetes에서 클러스터 내 파드들에 대한 접근 지점을 제공한다.
서비스는 클러스터 내부의 여러 파드들을 추상화하고, 외부에서 그 서비스에 접근할 수 있도록 연결하는 역할을 한다.&lt;/li&gt;
  &lt;li&gt;서비스는 파드를 찾는 경로를 제공하며, 외부 요청을 적절한 파드로 로드벨런싱하여 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nodeport&quot;&gt;NodePort&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;NodePort는 Kubernetes에서 서비스가 외부와 통신할 수 있도록 만드는 방법 중에 하나이다.&lt;/li&gt;
  &lt;li&gt;클러스터 내 파드는 외부와 직접 연결되지는 않지만, 서비스가 노트포트를 통해 외부 트래픽을 수신한다.
    &lt;ul&gt;
      &lt;li&gt;즉 서비스가 파드들로 트래픽을 전달하는 구조를 맡고있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;서비스를-통해서-외부와-연결되는-파드&quot;&gt;서비스를 통해서 외부와 연결되는 파드&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl run nginx &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx
pod/nginx created
root@cp-k8s:~# k get pods
NAME    READY   STATUS              RESTARTS   AGE
nginx   1/1     Running   0          11s

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;배포한-파드의-ip-확인&quot;&gt;배포한 파드의 IP 확인&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl get pods &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME    READY   STATUS    RESTARTS   AGE   IP               NODE     NOMINATED NODE   READINESS GATES
nginx   1/1     Running   0          77s   172.16.103.129   w2-k8s   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파드의 IP는 172.17.103.129임을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;curl을-통해-확인&quot;&gt;curl을 통해 확인&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# curl 172.16.103.129
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
html &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; color-scheme: light dark&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
body &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; width: 35em&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; margin: 0 auto&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://nginx.org/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://nginx.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;파드를-노출&quot;&gt;파드를 노출&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl expose pod nginx &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NodePort &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;80
service/nginx exposed

root@cp-k8s:~# kubectl get svc
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        AGE
kubernetes   ClusterIP   10.96.0.1      &amp;lt;none&amp;gt;        443/TCP        41m
nginx        NodePort    10.99.57.196   &amp;lt;none&amp;gt;        80:31102/TCP   18s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;노드에 접속을 해서 파드에 접속한다. 그래서 노드에 대한 정보가 필요하다&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cp-k8s:~# kubectl get nodes &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME     STATUS   ROLES           AGE   VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION       CONTAINER-RUNTIME
cp-k8s   Ready    control-plane   42m   v1.30.1   192.168.1.10    &amp;lt;none&amp;gt;        Ubuntu 22.04.4 LTS   5.15.0-107-generic   containerd://1.6.28
w1-k8s   Ready    &amp;lt;none&amp;gt;          40m   v1.30.1   192.168.1.101   &amp;lt;none&amp;gt;        Ubuntu 22.04.4 LTS   5.15.0-107-generic   containerd://1.6.28
w2-k8s   Ready    &amp;lt;none&amp;gt;          38m   v1.30.1   192.168.1.102   &amp;lt;none&amp;gt;        Ubuntu 22.04.4 LTS   5.15.0-107-generic   containerd://1.6.28
w3-k8s   Ready    &amp;lt;none&amp;gt;          37m   v1.30.1   192.168.1.103   &amp;lt;none&amp;gt;        Ubuntu 22.04.4 LTS   5.15.0-107-generic   containerd://1.6.28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;80&lt;/strong&gt;: Kubernetes 클러스터 내에서 서비스가 수신하는 &lt;strong&gt;내부 포트이다&lt;/strong&gt;. 클러스터 내부에서 다른 파드나 서비스가 이 포트로 접근한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;31102&lt;/strong&gt;: 외부에서 이 서비스를 접근할 때 사용하는 &lt;strong&gt;노드 포트이다(외부포트)&lt;/strong&gt;. 외부에서 클러스터 노드의 IP와 함께 이 포트로 접근할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브라우저외부-접속-확인&quot;&gt;브라우저(외부) 접속 확인&lt;/h2&gt;
&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/c1e18538-9536-4988-a70d-44bee911b751&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/containers/what-is-kubernetes&quot;&gt;https://www.redhat.com/ko/topics/containers/what-is-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/kubernetes-engine?hl=ko&quot;&gt;https://cloud.google.com/kubernetes-engine?hl=ko&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;a href=&quot;https://www.openmaru.io/%ea%b5%ac%ea%b8%80%ea%b3%bc-%ec%bf%a0%eb%b2%84%eb%84%a4%ed%8b%b0%ec%8a%a4/&quot;&gt;https://www.openmaru.io/구글과-쿠버네티스/&lt;/a&gt;&amp;gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2025/01/20/Kubernetes-basic-09/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2025/01/20/Kubernetes-basic-09/</guid>
        
        <category>k8s</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Spring adv 05 - CGLIB</title>
        <description>&lt;h2 id=&quot;cglib&quot;&gt;CGLIB&lt;/h2&gt;

&lt;p&gt;CGLIB(Code Generator Library)는 코드 생성 라이브러리로서 런타임에 동적으로 자바 클래스의 프록시를 생성해주는 기능을 제공한다. 
인터페이스가 아닌 클래스에 대해서 동적 프록시를 생성할 수 있다.
인터페이스 기반은 JDK Dynamic Proxy로 클래스 기반은 CGLIB를 사용한다.
CGLIB는 타겟에 대한 정보를 직접적으로 제공 받아 바이트 코드를 조작하여 프록시를 생성한다. 
때문에 리플렉션을 사용하는 JDK Dynamic Proxy에 비해서 성능이 좋다. 또한 CGLIB는 메소드가 처음 호출 되었을 때 동적으로 타켓 클래스의 바이트 코드를 조작하고, 이후 호출 시엔 조작된 바이트 코드를 재사용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스 없이 단순 클래스만으로 프록시 객체를 동적으로 생성이 가능하다.&lt;/li&gt;
  &lt;li&gt;리플렉션이 아닌 바이트 조작을 사용하며, 타겟에 대한 정보를 알고 있기 때문에 JDK Dynamic Proxy에 비해 성능이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/11bfc645-c5a8-4479-9ce6-d04e50ca6a3b&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TimeMethodInterceptor는 MethodInterceptor 인터페이스를 구현해서 CGLIB 프록시의 실행 로직을 정의한다.&lt;/li&gt;
  &lt;li&gt;JDK 동적 프록시라고 생각하면 편하다&lt;/li&gt;
  &lt;li&gt;method.invoke(target, args) 실제 대상을 동적으로 호출한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/ccd197b8-4f04-4761-bae4-94222c7ed80e&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ConcreteService를 상속받아서 동적으로 프록시를 만들게 된다.
    &lt;ul&gt;
      &lt;li&gt;따라서 proxy는 ConcreteService로 캐스팅이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Enhancer: CGLIB는 Enhancer를 사용해서 프록시를 생성한다.&lt;/li&gt;
  &lt;li&gt;CGLIB는 구체 클래스를 상속 받아서 프록시를 생성할 수 있다. 어떤 구체 클래스를 상속 받을지 지정한다.&lt;/li&gt;
  &lt;li&gt;프록시에 적용할 실행 로직을 할당한다.&lt;/li&gt;
  &lt;li&gt;프록시를 생성한다. 앞서 설정한 enhancer.setSuperclass(ConcreteServlce.class)에서 지정한 클래스를 상속 받아서 프록시가 만들어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/e386d810-f642-4295-b4d1-05ca3236ed27&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 결과는 동적으로 프록시를 만들게 되는데 ConcreteService를 상속받아서 클래스를 만들게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;클래스-의존-관계&quot;&gt;클래스 의존 관계&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/db43e60a-8f09-4ccc-8bb6-6280d813e4bb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 Client는 TestCode를 의미한다.
우선 동적 프록시는 ConcreteServlce를 상속받아서 만들어진다.
그리고 동적 프록시는 handlerInterceptor를 뒤에서 호출하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;런타임-의존-괸계&quot;&gt;런타임 의존 괸계&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/c6ebc15f-70db-4611-995e-96865ac1cc8a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;런타임에서는 클라이언트가 cglib에게 메시지를 보내게 되고, 프록시는 timeMethodInterceptor(MethodInterceptor를 상속받은 구현체)에게 메시지를 보내게 된다. 
그리고 timeMethodInterceptor는 ConcreteService의 target을 호출하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;김영한님의 스프링 핵심 원리&lt;/p&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/12/Spring-adv-05/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/12/Spring-adv-05/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring adv 04 - Proxy Pattern</title>
        <description>&lt;h2 id=&quot;proxy&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;클라이언트가 요청한 결과를 서버에 직접 요청하는 것이 아니라 어떤 대리자를 통해서 대신 간접적으로 서버에 요청할 수 있다.
예를 들어서 내가 직접 마트에서 장을 볼 수도 있지만, 누군가에게 대신 장을 봐달라고 부탁할 수도 있다.
여기서 대신 장을 보는 &lt;strong&gt;대리자를&lt;/strong&gt; &lt;strong&gt;영어로&lt;/strong&gt; &lt;strong&gt;프록시&lt;/strong&gt;(Proxy)라 한다.&lt;/p&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;

&lt;p&gt;재미있는 점은 직접 호출과 다르게 간접 호출을 하면 대리자가 중간에서 여러가지 일을 할 수 있다는 점이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;엄마에게 라면을 사달라고 부탁 했는데, 엄마는 그 라면은 이미 집에 있다고 할 수도 있다. 그러면 기대한 것 보다 더 빨리 라면을 먹을 수 있다. (접근 제어, 캐싱)&lt;/li&gt;
  &lt;li&gt;아버지께 자동차 주유를 부탁했는데, 아버지가 주유 뿐만 아니라 세차까지 하고 왔다. 클라이언트가 기대한 것 외에 세차라는 부가 기능까지 얻게 되었다. (부가 기능 추가)&lt;/li&gt;
  &lt;li&gt;대리자가 또 다른 대리자를 부를 수도 있다.
    &lt;ul&gt;
      &lt;li&gt;예를 들어서 내가 동생에게 라면을 사달라고 했는데, 동생은 또 다른 누군가에게 라면을 사달라고 다시 요청할 수도 있다.&lt;/li&gt;
      &lt;li&gt;중요한 점은 클라이언트는 대리자를 통해서 요청했기 때문에 그 이후 과정은 모른다는 점이다. 동생을 통해서 라면이 나에게 도착하기만 하면 된다. (프록시 체인)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프록시의-주요-기능&quot;&gt;프록시의 주요 기능&lt;/h2&gt;

&lt;p&gt;프록시를 통해서 할 수 있는 일은 크게 2가지로 구분할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;접근 제어&lt;/li&gt;
  &lt;li&gt;권한에 따른 접근 차단&lt;/li&gt;
  &lt;li&gt;캐싱&lt;/li&gt;
  &lt;li&gt;지연 로딩&lt;/li&gt;
  &lt;li&gt;부가 기능 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다. 요청 값이나, 응답 값을 중간에 변형한다.
실행 시간을 측정해서 추가 로그를 남긴다. 
프록시 객체가 중간에 있으면 크게 접근 제어와 부가 기능 추가를 수행할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프록시 패턴: 접근 제어가 목적&lt;/li&gt;
  &lt;li&gt;데코레이터 패턴: 새로운 기능 추가가 목적&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;둘다 프록시를 사용하지만, 의도가 다르다는 점이 핵심이다. 
용어가 프록시 패턴이라고 해서 이 패턴만 프록시를 사용하는 것은 아니다.
데코레이터 패턴도 프록시를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/2548692b-4291-42bf-b71e-e5b45e73ae4f&quot; /&gt;
이와 같은 객체 의존관계를 코드로 구현해보자&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/7b701fb5-7a76-4ca6-a687-ef113fe57a5b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 설명한 것 처럼 프록시도 실제 객체와 그 모양이 같아야 하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subject&lt;/code&gt; 인터페이스를 구현해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;private Subject target: 클라이언트가 프록시를 호출하면 프록시가 최종적으로 실제 객체를 호출해야 한다.&lt;/li&gt;
  &lt;li&gt;따라서 내부에 실제 객체의 참조를 가지고 있어야 한다. 이렇게 프록시가 호출하는 대상을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; 이라 한다.&lt;/li&gt;
  &lt;li&gt;operation():  구현한 코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheValue&lt;/code&gt; 에 값이 없으면 실제 객체(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; )를 호출해서 값을 구한다.&lt;/li&gt;
  &lt;li&gt;그리고 구한 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheValue&lt;/code&gt; 에 저장하고 반환한다. 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheValue&lt;/code&gt; 에 값이 있으면 실제 객체를 전혀 호출하지 않고, 캐시 값을 그대로 반환한다.&lt;/li&gt;
  &lt;li&gt;따라서 처음 조회 이후에는 캐시(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheValue&lt;/code&gt; )에서 매우 빠르게 데이터를 조회할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/64621bce-e364-4751-94b0-b1fe9f23527d&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/87d1b9a6-38e2-41bf-82d1-763827188051&quot; /&gt;&lt;/p&gt;

&lt;p&gt;데이터가 엄청 빠르게 조회되는 것을 확인할 수 있다. 처음에는 cacheValue에 데이터가 없기 때문에 실제 데이터를 담아두고 그 다음에 조회할 때는 cacheValue에서 데이터를 매우 빠르게 조회하는 것이 프록시의 역할이다.
결과적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realSubject&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheProxy&lt;/code&gt; 를 생성하고 둘을 연결한다.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheProxy&lt;/code&gt; 가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realSubject&lt;/code&gt;를 참조하는 런타임 객체 의존관계가 완성된다.
그리고 마지막으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realSubject&lt;/code&gt; 가 아&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacheProxy&lt;/code&gt; 를 주입한다.
이 과정을 통해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client -&amp;gt; cacheProxy -&amp;gt; realSubject&lt;/code&gt; 런타임 객체 의존 관계가 완성된다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;김영한님의 스프링 핵심 원리&lt;/p&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/09/Spring-adv-04/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/09/Spring-adv-04/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring adv 03 - Template Method Pattern - 1</title>
        <description>&lt;h2 id=&quot;template-method-pattern&quot;&gt;template method pattern&lt;/h2&gt;

&lt;p&gt;좋은 설계는 변하는 것과 변하지 않는 것을 분리하는 것이다. 
여기서 핵심 기능 부분은 변하고, 로그 추적기를 사용하는 부분은 변하지 않는 부분이다. 
이 둘을 분리해서 모듈화해야 한다. 템플릿 메서드 패턴(Template Method Pattern)은 이런 문제를 해결하는 디자인 패턴이다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/4bc140a3-80ab-4be2-836c-bc8b052102bd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;템플릿 메서드 패턴을 알아보는 간단한 테스트 코드이다.
여기서 변하는 부분은 비즈니스 부분이고 변하지 않는 부분은 시간을 측정하는 로직이다.
변하는 부분과 변하지 않는 부분을 분리해서 모듈화 해보자&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/275974ec-f18f-4dc5-b53d-fa91b022bb57&quot; /&gt;&lt;/p&gt;

&lt;p&gt;템플릿 메서드 패턴은 이름 그대로 템플릿을 사용하는 방식이다. 템플릿은 기준이 되는 거대한 틀이다. 템플릿이라는 틀에 변하지 않는 부분을 몰아둔다. 그리고 일부 변하는 부분을 별도로 호출해서 해결한다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractTemplate&lt;/code&gt; 코드를 보자. 변하지 않는 부분인 시간 측정 로직을 몰아둔 것을 확인할 수 있다. 이제 이것이 하나의 템플릿이 된다. 그리고 템플릿 안에서 변하는 부분은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; 메서드를 호출해서 처리한다. 템플릿 메서드 패턴은 부모 클래스에 변하지 않는 템플릿 코드를 둔다. 그리고 변하는 부분은 자식 클래스에 두고 상속과 오버라이딩을 사용해서 처리한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubClassLogic1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;비즈니스 로직 1 실행&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubClassLogic2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;비즈니스 로직 2 실행&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/226743a6-7e66-4a7b-8729-48667ca0e5da&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/31ce7d8d-efcb-4f09-9184-af11785544d4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template1.execute()&lt;/code&gt; 를 호출하면 템플릿 로직인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractTemplate.execute()&lt;/code&gt; 를 실행한다.
여기서 중간에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; 메서드를 호출하는데, 이 부분이 오버라이딩 되어있다. 
따라서 현재 인스턴스인&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubClassLogic1&lt;/code&gt; 인스턴스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubClassLogic1.call()&lt;/code&gt; 메서드가 호출된다. 
템플릿 메서드 패턴은 이렇게 다형성을 사용해서 변하는 부분과 변하지 않는 부분을 분리하는 방법이다.
근데 템플릿 메서드 패턴은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubClassLogic1&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubClassLogic2&lt;/code&gt; 처럼 클래스를 계속 만들어야 하는 단점이 있다. 
익명 내부 클래스를 사용하면 이런 단점을 보완할 수 있다.
익명 내부 클래스를 사용하면 객체 인스턴스를 생성하면서 동시에 생성할 클래스를 상속 받은 자식 클래스를 정의할 수 있다. 
이 클래스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubClassLogic1&lt;/code&gt; 처럼 직접 지정하는 이름이 없고 클래스 내부에 선언되는 클래스여서 익명 내부 클래스라 한다.
익명 내부 클래스를 사용해서 다음 코드를 개선해 보자&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;김영한님의 스프링 핵심 원리&lt;/p&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/08/Spring-adv-03/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/08/Spring-adv-03/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>살며 사랑하며 배우며</title>
        <description>&lt;h2 id=&quot;살며-사랑하며-배우며&quot;&gt;살며 사랑하며 배우며&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;360&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/1c86b58c-7d11-4364-9ba1-ea0c8d2d166b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나는 책 읽는 것을 좋아했다. 
내 인생에서 가장 바쁜 시기를 꼽는다면 대학교 시절의 4학년 2학기부터 작년 여름까지일 것이다. 
4학년의 수업을 전공으로만 30학점을 채워야 했고, 
4학년 때 개발자의 꿈을 갖게 되어 멘토링을 들으며 졸업작품을 진행했고, 
카카오에서의 기회가 있어 자소서를 쓰고 면접을 준비하느라 정말 바쁜 시간들을 보내왔었다. 
워낙에 바쁘고 시간이 없다 보니 책을 꺼내도 도서관에서는 항상 개발 및 전공 관련 서적만 찾아 읽곤 했다.
이 책을 읽게 된 건 졸업을 앞두고 평소처럼 도서관을 기웃거리다 제목이 눈에 띄어 집어 들어 읽게 되었다.
그리고 주제도 재밌잖아? 살며 사랑하며 배우며? 제목만 봐도 읽고 싶은 책이다.
근데 이 글을 쓰면서 느끼는 건 사회에 나와 정신없이 일하고 배우다보니 요즘 읽는 책도 대부분 전공 서적이었는데 
당시 없는 시간 짜내며 책 읽던 모습이 그리워 지기도 한다.&lt;/p&gt;

&lt;h2 id=&quot;책-내용&quot;&gt;책 내용&lt;/h2&gt;

&lt;p&gt;저자는 직업이 교사답게 삶에서 많이 배운 것들을 바탕으로, 인생에 얻은 교훈들에 대해 많은 사람들에게 널리 사랑을 가르쳐주는 것처럼 
강의하는 형태로 문체가 형성되어 있고, 그 내용은 물 흐르듯이, 마치 한 편의 영화를 보는 것 같은 진한 감동의 여운이 다가올 정도였다. 
찾아보니 꽤나 오래된 책으로 미국 사람들에게 유명한 책이라고 해서 어떤 내용일지 궁금했는데 
말 그대로 ‘사랑’ 관련된 이야기였다. 사랑이라고 하면 흔히 연애로부터 오는 감정을 떠올리게 되는데 이 책은
자기 자신에 대한 사랑, 가족간의 애정, 친구와의 우정이나 주변 사람, 일상에 대한 관심 같은 것들을 가르쳐 준다. 
교사의 삶을 살아가면서, 가르치는 사람으로서 살아가면서, 내가 사랑하게 된 것들, 그리고 사랑할 때 알아야하는 것들, 
배운 것들에 대해 아낌없이 조언해놓은 글이라고 해도 과언이 아닌 책이었다.&lt;/p&gt;

&lt;p&gt;챕터들마다 정말 하나같이 버릴게 없지만 인상깊었던 부분은 죽음에 대한 것과 현재를 살아가는 사람으로서 오늘을 사랑해야 한다는 내용이었다.
누구에게나 공평하게 다가오는 죽음을 실감하면서 살아가진 않지만, 언젠가 직면하게 될, 
사람이라면 누구나 겪게 되는 죽음을 받아들인다는 것이 어떤 의미인지 생각해볼 수 있었던 부분이었다. 
모든 것을 내려 놓을 수 있는 죽음을 맞이할 수 있을까 싶기도 하고. 아직은 먼 이야기인 것 같지만, 
삶에 대한 의미를 내 나름대로 생각해볼 수 있는 계기가 될 수 있었다. 그리고 ‘오늘’에 대한 이야기. 
나도 글을 적으면서 어제, 오늘, 내일에 대해 많이 생각해봤었다. 오늘이 가장 중요함을 알고 있으면서도 내일을 위해 시간을 허비한 일도 많았고, 
어제의 후회에 대한 생각으로 인해 시간을 낭비한 경험도 없지 않았기에, 오늘에 대해 소중히 생각하고, 오늘을 현명하게 살아가야겠다.
사실 평범한 일상이 가장 행복한 일상이 아닐까 하는 생각도 든다.&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/life/2025/01/06/books-02/</link>
        <guid isPermaLink="true">http://localhost:4000/life/2025/01/06/books-02/</guid>
        
        <category>books</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Spring adv 02 - log ProtoType 적용</title>
        <description>&lt;h2 id=&quot;prototype-적용&quot;&gt;ProtoType 적용&lt;/h2&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;RestController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderControllerV1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderServiceV1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloTraceV1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/v0/request&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nx&quot;&gt;TraceStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OrderController.request&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;orderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HelloTraceV1은 로그 추적을 담당하는 클래스이며, @Component 애노테이션을 통해 Spring의 빈으로 등록된다. 
이로 인해 OrderControllerV1 클래스에서는 HelloTraceV1을 자동으로 주입받을 수 있다. 
request 메서드는 클라이언트로부터 들어온 요청을 처리하는 컨트롤러 메서드로, 
trace.begin(“OrderController.request”)로 로그 추적을 시작하고, orderService.orderItem(itemId)로 실제 주문을 처리한다. 
주문 처리가 완료되면 trace.end(status)로 로그를 종료하며, 예외가 발생할 경우 trace.exception(status, e)로 예외를 추적한다. 
이러한 방식으로 요청의 흐름을 추적함으로써 요청 처리 과정에서 발생할 수 있는 문제를 빠르게 파악하고 디버깅할 수 있다. 
그러나 trace.begin()과 trace.end()만으로는 예외 처리가 어렵기 때문에 try-catch 블록을 사용하여 예외를 처리하고, 
예외가 발생한 경우에도 적절히 로깅을 남긴다.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;troubleShooting&lt;/h2&gt;

&lt;p&gt;begin() 의 결과 값으로 받은&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus status&lt;/code&gt; 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end()&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exception()&lt;/code&gt; 에 넘겨야 한다. 
결국&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; 블록 모두에 이 값을 넘겨야헀다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 상위에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus status&lt;/code&gt; 코드를 선언해야 한다. 
만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 안에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus status&lt;/code&gt; 를 선언하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 블록안에서만 해당 변수가 유효하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; 블록에 넘길 수 없다. 
따라서 컴파일 오류가 발생한다. 따라서 정상 흐름으로 동작하기 위해서는 throw e로 예외를 던져줘야 애플리케이션 흐름에 영향을 주지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;orderitem2-처럼-메서드를-만들어도-될-것-같은데-왜-굳이-try-catch-구문을-사용했을까&quot;&gt;orderItem2 처럼 메서드를 만들어도 될 것 같은데 왜 굳이 try-catch 구문을 사용했을까?&lt;/h2&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderItem2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;TraceStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OrderService.orderItem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;orderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;TraceStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 예외가 터져도 실행이 되야함 **/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OrderService.orderItem()&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;orderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/** 예외는 꼭 던져야 한다. **/&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결론은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orderItem2&lt;/code&gt; 메소드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.exception(status, new IllegalStateException())&lt;/code&gt;를 사용하여 예외를 명시적으로 기록할 수 있지만, 
&lt;strong&gt;예외 처리&lt;/strong&gt;와 &lt;strong&gt;트레이싱&lt;/strong&gt;의 역할을 제대로 수행하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt; 구문을 사용하는 것이 더 적합하다.&lt;/p&gt;

&lt;h3 id=&quot;예외-발생을-명시적으로-처리하는-역할&quot;&gt;예외 발생을 명시적으로 처리하는 역할&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.exception(status, new IllegalStateException())&lt;/code&gt;는 예외가 발생했다는 사실을 추적 시스템에 기록하기 위해 사용되지만, 실제로 예외를 던지거나 처리하는 것이 아니다. 
이는 &lt;strong&gt;예외를 강제로 발생시키는 것&lt;/strong&gt;일 뿐 실제 예외 흐름을 관리하는 것과는 다르다.
예를 들어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orderItem2&lt;/code&gt;에서 예외를 던지지 않으면, 시스템에서 어떤 예외가 발생했는지 알기 어려워질 수 있다. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt; 구문을 사용하면 예외를 &lt;strong&gt;명확하게 처리하고, 재발생시키거나 다른 방식으로 처리&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;추적-상태가-누락될-가능성&quot;&gt;추적 상태가 누락될 가능성&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.end(status)&lt;/code&gt;는 정상적으로 메소드가 완료되었을 때 호출되는 코드이다. 
하지만 예외가 발생하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.exception(status, e)&lt;/code&gt;가 호출되더라도 예외가 처리되지 않으면 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.end(status)&lt;/code&gt;가 호출되지 않고 메소드가 중단될 수 있다. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt; 구문을 사용하면 예외 발생 시에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace.end(status)&lt;/code&gt;가 호출되도록 보장할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/89a5e7f9-7228-46cc-9731-9d6efe95a08a&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost:8080/v1/request?itemId=hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;765&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/1cb27c01-8f7f-4319-a7fa-728f1e26c33f&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HelloTraceV1&lt;/code&gt; 덕분에 직접 로그를 하나하나 남기는 것 보다는 편하게 여러가지 로그를 남길 수 있었다. 
하지만 로그를 남기기 위한 코드가 생각보다 너무 복잡하다. 
왜 모니터링을 쓰는지도 알 것 같다. 또 의존성 주입이 많아지면 의존성 관리가 어려워 질 수 있다. (양방향 의존성이 생길 수도 있고)&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;김영한님의 스프링 핵심 원리&lt;/p&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/05/Spring-adv-02/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/05/Spring-adv-02/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring adv 01 - log ProtoType</title>
        <description>&lt;h2 id=&quot;prototype&quot;&gt;ProtoType&lt;/h2&gt;

&lt;p&gt;애플리케이션의 모든 로직에 직접 로그를 남겨도 되지만, 그것보다는 더 효율적인 개발 방법이 필요하다. 
특히 트랜잭션 ID와 깊이를 표현하는 방법은 기존 정보를 이어 받아야 하기 때문에 단순히 로그만 남긴다고 해결할 수 있는 것은 아니다.
요구사항에 맞추어 애플리케이션에 효과적으로 로그를 남기기 위한 로그 추적기를 개발해보자. 먼저 프로토타입 버전을 개발해보자. 
아마 코드를 모두 작성하고 테스트 코드까지 작성해보자
먼저 로그 추적기를 위한 기반 데이터를 가지고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceId&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HelloTraceV1&lt;/code&gt; 클래스를 만들어보자.&lt;/p&gt;

&lt;h2 id=&quot;진행-요구사항&quot;&gt;진행 요구사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;모든 PUBLIC 메서드의 호출과 응답 정보를 로그로 출력&lt;/li&gt;
  &lt;li&gt;애플리케이션의 흐름을 변경하면 안됨 로그를 남긴다고 해서 비즈니스 로직의 동작에 영향을 주면 안됨&lt;/li&gt;
  &lt;li&gt;메서드 호출에 걸린 시간 정상 흐름과 예외 흐름 구분 예외 발생시 예외 정보가 남아야 함 메서드 호출의 깊이 표현&lt;/li&gt;
  &lt;li&gt;HTTP 요청을 구분 HTTP 요청 단위로 특정 ID를 남겨서 어떤 HTTP 요청에서 시작된 것인지 명확하게 구분이 가능해야 함&lt;/li&gt;
  &lt;li&gt;트랜잭션 ID (DB 트랜잭션X), 여기서는 하나의 HTTP 요청이 시작해서 끝날 때 까지를 하나의 트랜잭션이
라 함&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;정상&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;요청&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|--&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|--&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1004ms&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;796bccd9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&amp;lt;--&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OrderService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1014ms&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;796bccd9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OrderController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1016ms&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;예외&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;발생&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b7119f27&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OrderController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b7119f27&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;OrderService.orderItem()
[b7119f27] | |--&amp;gt;OrderRepository.save()
[b7119f27] | |&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0ms&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;예외&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;발생!&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b7119f27&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;X-OrderService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;10ms&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;예외&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;발생!&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b7119f27&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OrderController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;11ms&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;예외&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;발생!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HTTP 요청의 사이클을 하나의 트랜잭션으로 기준을 잡고 이러한 형식의 트랜잭션 스팩을 만들 것이다. 
물론 모니터링을 도입하면 편하지만, 지금은 학습의 목적&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TraceId.java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/72f2b4ec-f132-46f3-b137-cc8325a5281f&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/65bea174-9f66-4213-bd26-fb36ec61a967&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그 추적기는 트랜잭션ID와 깊이를 표현하는 방법이 필요하다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceId&lt;/code&gt; 는 단순히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; (트랜잭션ID)와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level&lt;/code&gt; 정보를 함께 가지고 있다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//트랜잭션ID:796bccd9, level:0&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|--&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//트랜잭션ID:796bccd9, level:1&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bccd9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|--&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//트랜잭션ID:796bccd9, level:2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TraceStatus.java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/83c84235-06c7-4a4d-a702-37d15ddff27d&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus&lt;/code&gt; 는 로그를 시작할 때의 상태 정보를 가지고 있다. 이 상태 정보는 로그를 종료할 때 사용된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;traceId: 내부에 트랜잭션ID와 level을 가지고 있다.&lt;/li&gt;
  &lt;li&gt;startImeMs: 로그 시작시간이다. 로그 종료시 이 시작 시간을 기준으로 시작~종료까지 전체 수행 시간을 구
할 수 있다.&lt;/li&gt;
  &lt;li&gt;message 시작시 사용한 메시지이다. 이후 로그 종료시에도 이 메시지를 사용해서 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HelloTraceV1.java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/5b56b64d-1809-4cb2-be8d-bed1687b20f2&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/b9f57d96-0744-4ad6-996e-763e5c74c051&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/8009f0eb-db90-45a1-8414-b35045538910&quot; /&gt;&lt;/p&gt;

&lt;p&gt;주요한 메서드만 작성했고, 코드의 자세한 정보는 &lt;a href=&quot;https://github.com/taewoocode/spring_adv_study&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TraceStauts begin(String message)
    &lt;ul&gt;
      &lt;li&gt;로그를 시작한다.&lt;/li&gt;
      &lt;li&gt;로그 메시지를 파라미터로 받아서 시작 로그를 출력한다.&lt;/li&gt;
      &lt;li&gt;응답 결과로 현재 로그의 상태인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus&lt;/code&gt; 를 반환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;void end(TraceStatus status)
    &lt;ul&gt;
      &lt;li&gt;로그를 정상 종료한다. 파라미터로 시작 로그의 상태(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus&lt;/code&gt; )를 전달 받는다. 이 값을 활용해서 실행 시간을 계산하고, 종료시에도 시작할 때와 동일한 로그 메시지를 출력할 수 있다.&lt;/li&gt;
      &lt;li&gt;정상 흐름에서 호출한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;void exception(TraceStatus status, Exception e)
    &lt;ul&gt;
      &lt;li&gt;로그를 예외 상황으로 종료한다.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceStatus&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; 정보를 함께 전달 받아서 실행시간, 예외 정보를 포함한 결과 로그를 출력한다.&lt;/li&gt;
      &lt;li&gt;예외가 발생했을 때 호출한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-코드-작성&quot;&gt;테스트 코드 작성&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/22e6e6dd-cef0-4467-bc81-8e774443b202&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그 출력 확인&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/09579b99-8a16-4787-9eb9-2f896b993adb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그 출력 확인&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/c04826ff-f603-4a85-8f08-7fa4ed46cf14&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;김영한님의 스프링 핵심 원리&lt;/p&gt;

&lt;p&gt;나의 뇌&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/04/Spring-adv-01/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/04/Spring-adv-01/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 18 - Prometheus basic</title>
        <description>&lt;h2 id=&quot;prometheus-basic-basic&quot;&gt;&lt;strong&gt;Prometheus basic&lt;/strong&gt; &lt;strong&gt;basic&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;검색창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_server_requests_seconds_count&lt;/code&gt; 를 입력하고 실행해보자&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/48e9f44f-abfe-4502-9cb0-cdb5f56f6416&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;태그label-또는-tag의-개념&quot;&gt;&lt;strong&gt;태그(Label 또는 Tag)의 개념&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;태그는 메트릭 데이터에 추가 정보를 제공하는 key-value 쌍으로, 데이터를 세부적으로 분류하거나 특정 조건으로 조회할 때 사용된다.&lt;/p&gt;

&lt;h3 id=&quot;prometheus와-micrometer의-용어-차이&quot;&gt;&lt;strong&gt;Prometheus와 Micrometer의 용어 차이&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Prometheus: &lt;strong&gt;Label&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Micrometer: &lt;strong&gt;Tag&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;둘은 기능적으로 동일하며, 메트릭 데이터를 필터링하거나 그룹화할 때 사용된다&lt;/p&gt;

&lt;h3 id=&quot;레이블-기반-필터링&quot;&gt;&lt;strong&gt;레이블 기반 필터링&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Prometheus에서는 레이블을 기반으로 특정 메트릭 데이터를 선택적으로 조회할 수 있다. 이를 &lt;strong&gt;필터링&lt;/strong&gt;이라고 하며, 다음과 같은 연산자를 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;레이블-연산자&quot;&gt;&lt;strong&gt;레이블 연산자&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산자&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;예시&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;제공된 문자열과 &lt;strong&gt;정확히 동일&lt;/strong&gt;한 레이블 선택&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method=&quot;GET&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;제공된 문자열과 &lt;strong&gt;같지 않은&lt;/strong&gt; 레이블 선택&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method!=&quot;POST&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;제공된 문자열과 &lt;strong&gt;정규식으로 일치&lt;/strong&gt;하는 레이블 선택&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uri=~&quot;/api/v[0-9]+/.*&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;제공된 문자열과 &lt;strong&gt;정규식으로 일치하지 않는&lt;/strong&gt; 레이블 선택&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uri!~&quot;/actuator.*&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;필터-예제&quot;&gt;&lt;strong&gt;필터 예제&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;레이블의-정확한-일치-조건&quot;&gt;&lt;strong&gt;레이블의 정확한 일치 조건&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uri&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;를 가진 메트릭 데이터만 조회&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http_server_requests_seconds_count{uri=&quot;/log&quot;, method=&quot;GET&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;레이블의-부정-조건&quot;&gt;&lt;strong&gt;레이블의 부정 조건&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uri&lt;/code&gt;를 제외한 데이터를 조회&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http_server_requests_seconds_count{uri!=&quot;/actuator/prometheus&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정규식을-사용한-조건&quot;&gt;&lt;strong&gt;정규식을 사용한 조건&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;인 데이터를 조회&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http_server_requests_seconds_count{method=~&quot;GET|POST&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator&lt;/code&gt;로 시작하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uri&lt;/code&gt;를 제외한 데이터를 조회:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http_server_requests_seconds_count{uri!~&quot;/actuator.*&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/api/rest/actuator/prometheus.html&quot;&gt;https://docs.spring.io/spring-boot/api/rest/actuator/prometheus.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/03/Spring-basic-19/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/03/Spring-basic-19/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 17 - Prometheus Config</title>
        <description>&lt;h2 id=&quot;prometheus-config&quot;&gt;Prometheus config&lt;/h2&gt;

&lt;p&gt;프로메테우스는 메트릭을 수집하고 보관하는 DB이다. 프로메테우스가 우리 애플리케이션의 메트릭을 수집하도록 연동 해보자.
여기에는 2가지 작업이 필요하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션 설정: 프로메테우스가 애플리케이션의 메트릭을 가져갈 수 있도록 애플리케이션에서 프로메테우스 포멧에 맞추어 메트릭 만들기&lt;/li&gt;
  &lt;li&gt;프로메테우스 설정: 프로메테우스가 우리 애플리케이션의 메트릭을 주기적으로 수집하도록 설정&lt;/li&gt;
  &lt;li&gt;프로메테우스가 애플리케이션의 메트릭을 가져가려면 프로메테우스가 사용하는 포멧에 맞추어 메트릭을 만들어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로메테우스는 &lt;a href=&quot;https://github.com/prometheus/prometheus/releases/download/v2.42.0/&quot;&gt;여기&lt;/a&gt;서 다운로드 받을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/3fec6a57-ba46-4314-baf2-66246c294a78&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각각의 메트릭들은 내부에서 마이크로미터 표준 방식으로 측정되고 있다. 따라서 어떤 구현체를 사용할지 지정만 해주면 된다.&lt;/p&gt;

&lt;p&gt;build.gradle &lt;strong&gt;추가&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;io.micrometer:micrometer-registry-prometheus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마이크로미터 프로메테우스 구현 라이브러리를 추가한다.
이렇게 하면 스프링 부트와 액츄에이터가 자동으로 마이크로미터 프로메테우스 구현체를 등록해서 동작하도록 설정해준다. 
액츄에이터에 프로메테우스 메트릭 수집 엔드포인트가 자동으로 추가된다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/prometheus&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;prometheus.yml&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/7deea1ae-a0b0-41d3-bb76-336eb8d2e3f3&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/1dac37e7-422a-4f73-8e8b-a0f753e79722&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로메테우스 로컬서버를 실행해준다. 
그리고 Status에서 Configuration을 확인해주면 yml에서 적용해준 설정값들이 들어가 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/api/rest/actuator/prometheus.html&quot;&gt;https://docs.spring.io/spring-boot/api/rest/actuator/prometheus.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/reference/features/profiles.html&quot;&gt;https://docs.spring.io/spring-boot/reference/features/profiles.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jan 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2025/01/02/Spring-basic-18/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2025/01/02/Spring-basic-18/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 17 - spring actuator</title>
        <description>&lt;h2 id=&quot;프로덕션-준비&quot;&gt;프로덕션 준비&lt;/h2&gt;

&lt;p&gt;운영 환경에서 서비스할 때 필요한 이런 기능들을 프로덕션 준비 기능이라 한다. 쉽게 이야기해서 프로덕션을 운영에 배포할 때 준비해야 하는 비 기능적 요소들을 뜻한다.
지표(metric), 추적(trace), 감사(auditing) 애플리케이션이 현재 살아있는지, 로그 정보는 정상 설정 되었는지, 커넥션 풀은 얼마나 사용되고 있는지 등을 확인할 수 있어야 한다.
스프링 부트가 제공하는 액추에이터는 이런 프로덕션 준비 기능을 매우 편리하게 사용할 수 있는 다양한 편의 기능들을 제공한다. 더 나아가서 마이크로미터, 프로메테우스, 그라파나 같은 최근 유행하는 모니터링 시스템과 매우 쉽게 연동할 수 있는 기능도 제공한다.
참고로 액추에이터는 시스템을 움직이거나 제어하는 데 쓰이는 기계 장치라는 뜻이다.
여러 설명보다 한번 만들어서 실행해보는 것이 더 빨리 이해가 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;actuator&quot;&gt;actuator&lt;/h2&gt;

&lt;p&gt;액츄에이터가 제공하는 프로덕션 준비 기능을 사용하려면 스프링 부트 액츄에이터 라이브러리를 추가해야 한다.&lt;/p&gt;

&lt;p&gt;build.gradle&lt;/p&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;org.springframework.boot:spring-boot-starter-actuator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;actuator-설정파일-등록&quot;&gt;actuator 설정파일 등록&lt;/h2&gt;

&lt;p&gt;application.yml&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;management&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;exposure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;actuator에서 제공해주는 설정파일을 등록한다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_links&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/beans&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;caches-cache&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/caches/{cache}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/caches&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;health-path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/health/{*path}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/health&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/info&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;conditions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/conditions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;configprops&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/configprops&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;configprops-prefix&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/configprops/{prefix}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/env&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;env-toMatch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/env/{toMatch}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;loggers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/loggers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;loggers-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/loggers/{name}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;heapdump&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/heapdump&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;threaddump&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/threaddump&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metrics-requiredMetricName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/metrics/{requiredMetricName}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/metrics&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scheduledtasks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/scheduledtasks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/actuator/mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;templated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;다양한-엔드포인트&quot;&gt;다양한 엔드포인트&lt;/h2&gt;

&lt;p&gt;각각의 엔드포인트를 통해서 개발자는 애플리케이션 내부의 수 많은 기능을 관리하고 모니터링 할 수 있다.
스프링 부트가 기본으로 제공하는 다양한 엔드포인트에 대해서 알아보자. 다음은 자주 사용하는 기능 위주로 정리했다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beans&lt;/code&gt; : 스프링 컨테이너에 등록된 스프링 빈을 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conditions&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; 을 통해서 빈을 등록할 때 평가 조건과 일치하거나 일치하지 않는지 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configprops&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; 를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; 정보를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;health&lt;/code&gt; : 애플리케이션 헬스 정보를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpexchanges&lt;/code&gt; : HTTP 호출 응답 정보를 보여준다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpExchangeRepository&lt;/code&gt; 를 구현한 빈을 별도로 등록해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info&lt;/code&gt; : 애플리케이션 정보를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loggers&lt;/code&gt; : 애플리케이션 로거 설정을 보여주고 변경도 할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics&lt;/code&gt; : 애플리케이션의 메트릭 정보를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappings&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt; 정보를 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threaddump&lt;/code&gt; : 쓰레드 덤프를 실행해서 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutdown&lt;/code&gt; : 애플리케이션을 종료한다. 이 기능은 &lt;strong&gt;기본으로 비활성화&lt;/strong&gt; 되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 정보들을 제공받을 수 있다.
Bean은 등록됬는지 안됬는지도 확인이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/&quot;&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/reference/features/profiles.html&quot;&gt;https://docs.spring.io/spring-boot/reference/features/profiles.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/30/Spring-basic-17/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/30/Spring-basic-17/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 16 - Profile Bean</title>
        <description>&lt;h2 id=&quot;profile&quot;&gt;Profile&lt;/h2&gt;

&lt;p&gt;값이 다른 정도가 아니라 각 환경마다 서로 다른 빈을 등록해야 한다면 어떻게 해야할까?
예를 들어서 결제 기능을 붙여야 하는데, 
로컬 개발 환경에서는 실제 결제가 발생하면 문제가 되니 가짜 결제 기능이 있는 스프링 빈을 등록하고, 
운영 환경에서는 실제 결제 기능을 제공하는 스프링 빈을 등록한다고 가정해보자.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/e8cfd4f3-8625-4ecd-9ca5-a1f266f9ad6c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 인터페이스를 하나 정의한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/853284fc-20bf-459f-af3c-4190b7fbf366&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reference그 다음 구현체를 통해서 인터페이스를 구현한다.
스프링 프로필을 공부하기 위함이지 실제 결제기능 서비스를 개발하는 것은 아니기 때문에 log 정도만 남겨준다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/b6e6ea94-30f3-45f9-9c37-e0b6ff22aeda&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/a30f4804-f68c-4a47-a44d-59557b004d16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개발 환경에서 사용할 구현체와, 운영 환경에서 사용할 구현체를 나눠준다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/390529b5-a142-439c-8c2f-fe7ef470151a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Config를 통해서 수동으로 빈을 등록해준다.
개발 환경에서는 default, 운영환경에서는 prod를 사용할 것이기 때문에 역할에 맞게 빈을 등록한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/028f920d-e624-46be-b784-720d95deab22&quot; /&gt;
&lt;img width=&quot;654&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/b7dd60a2-d045-4b92-90bc-17c103bb125d&quot; /&gt;&lt;/p&gt;

&lt;p&gt;edit에 들어와서 prod로 적용해준다. 운영환경을 기준으로 애플리케이션을 실행해본다.
prod 프로필을 적용했다. pr프로필이 사용되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProdPayClient&lt;/code&gt; 가 빈으로 등록되는 것을 확인할 수 있다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Profile&lt;/code&gt; 은 특정 조건에 따라서 해당 빈을 등록할지 말지 선택한다. 어디서 많이 본 것 같지 않은가? 바로
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt; 이다. 코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional(ProfileCondition.class)&lt;/code&gt; 를 확인할 수 있다.
스프링은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt; 기능을 활용해서 개발자가 더 편리하게 사용할 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Profile&lt;/code&gt; 기능을 제공하는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/reference/features/profiles.html&quot;&gt;https://docs.spring.io/spring-boot/reference/features/profiles.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/26/Spring-basic-16/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/26/Spring-basic-16/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 15 - ConfigurationProperties</title>
        <description>&lt;h2 id=&quot;spring-configurationproperties&quot;&gt;Spring ConfigurationProperties&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스프링은 외부 설정의 묶음 정보를 객체로 변환하는 기능을 제공한다.&lt;/li&gt;
  &lt;li&gt;타입 안전한 설정 속성이라 한다.&lt;/li&gt;
  &lt;li&gt;객체를 사용하면 타입을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;따라서 타입 안전성이 보장된다.&lt;/li&gt;
  &lt;li&gt;객체를 통해서 활용할 수 있는 부분들이 많아진다.&lt;/li&gt;
  &lt;li&gt;위에서 말한 것들을 정리 해본다면 → 모든 외부 설정들을 자바코드로 관리하게 된다.&lt;/li&gt;
  &lt;li&gt;설정 정보 그 자체도 타입임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;코드로-알아보자&quot;&gt;코드로 알아보자&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;application.propeties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/8f58f364-7b42-4ec4-9928-3b249e7684bd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;외부 설정을 해줄 설정정보는 위와 같이 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/6793c3d4-3e4e-4a53-a140-6009f75b2e82&quot; /&gt;&lt;/p&gt;

&lt;p&gt;외부 설정을 주입 받을 객체를 생성한다. 
그리고 각 필드를 외부 설정의 키 값에 맞추어 준비한다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; 이 있으면 외부 설정을 주입 받는 객체라는 뜻이다. 
여기에 외부 설정 KEY의 묶음 시작점인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.datasource&lt;/code&gt; 를 적어준다. 기본 주입 방식은 자바빈 프로퍼티 방식이다. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Getter&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setter&lt;/code&gt; 가 필요하다. (롬복의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Data&lt;/code&gt; 에 의해 자동 생성된다.)&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/b875b4e1-eeb9-424e-b6d3-4fb83c12c8d4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableConfigurationProperties(MyDataSourcePropertiesV1.class)&lt;/code&gt;스프링에게 사용할 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; 를 지정해주어야 한다.&lt;/li&gt;
  &lt;li&gt;이렇게 하면 해당 클래스는 스프링 빈으로 등록되고, 필요한 곳에서 주입 받아서 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private final MyDataSourcePropertiesV1 properties&lt;/code&gt; 설정 속성을 생성자를 통해 주입 받
아서 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/18dc1571-0c62-4596-8c0a-6fbd7166b924&quot; /&gt;&lt;/p&gt;

&lt;p&gt;외부설정 값을 읽어오는 것을 확인할 수 있다.
그리고 표기법 변환이 일어난 것을 확인할 수 있다. 
max-connection은 (캐밥 케이스(표기법))을 따랐지만, 
자바 코드는 카멜 케이스로 적은 것을 확인할 수 있다. 스프링은 캐밥 표기법을 카멜 케이스로 중간에 자동변환을 지원해준다.&lt;/p&gt;

&lt;h2 id=&quot;코드의-문제점&quot;&gt;코드의 문제점&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyDataSourcePropertiesV1&lt;/code&gt; 은 스프링 빈으로 등록된다. 그런데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setter&lt;/code&gt; 를 가지고 있기 때문에 누군가 실수로
값을 변경하는 문제가 발생할 수 있다. 여기에 있는 값들은 외부 설정값을 사용해서 초기에만 설정되고, 이후에는 변경
하면 안된다. 이럴 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setter&lt;/code&gt; 를 제거하고 대신에 생성자를 사용하면 중간에 데이터를 변경하는 실수를 근본적으로 방
지할 수 있다.  이런 문제가 없을 것 같지만, 한번 발생하면 정말 잡기 어려운 버그가 만들어진다.
대부분의 개발자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyDataSourcePropertiesV1&lt;/code&gt; 의 값은 변경하면 안된다고 인지하고 있지만, 어떤 개발자가 자
신의 문제를 해결하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setter&lt;/code&gt; 를 통해서 값을 변경하게 되면, 애플리케이션 전체에 심각한 버그를 유발할 수 있
다.&lt;/p&gt;

&lt;h2 id=&quot;data---getter&quot;&gt;Data -&amp;gt; Getter&lt;/h2&gt;

&lt;p&gt;코드의 개선을 V2 버전을 만들어서 Lombok @Data에서 @Getter로 변경해주고 다시 실행시켰는데&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/4e31da83-70e4-40d1-be15-49515c292132&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 에러가 생겼다. 보니까 자바 빈 프로퍼티 주입 방식에서 Setter를 찾을 수 없어서 주입이 되지 않는다는 에러였다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/3298aa66-3874-4deb-ad50-abfcb1ef1887&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 생성자를 통해 주입을 해주니 잘 되는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/reference/features/profiles.html&quot;&gt;https://docs.spring.io/spring-boot/reference/features/profiles.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/20/Spring-basic-15/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/20/Spring-basic-15/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring Basic 14 - 라이브러리 직접 만들어 보기</title>
        <description>&lt;h2 id=&quot;순수-라이브러리&quot;&gt;순수 라이브러리&lt;/h2&gt;

&lt;p&gt;스프링부트가 직접 제공해주는 @AutoConfiguration을 이해하기 위해서는 그 전에 먼저 라이브러리가 어떻게 사용되는지 이해하는 것이 필요하다.
그리고 직접 라이브러리를 만들어 보면서 스프링 부트가 얼마나 위대한지 알 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/61384a2f-0a19-4356-b5b8-1e7d093ec679&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 라이브러리로 사용할 프로젝트에서 jar를 만들어 준다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/71978aa7-529a-48c2-9449-12cdba1928ff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 실제 라이브러리를 사용하는 프로젝트에서 루트 디렉토리 아래에 libs 폴더를 생성해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/3a7770af-51d5-4198-9ef8-aee960c25169&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 gradle에 가서 방금 추가한 jar의 경로를 gradle에 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/5837456f-ba1b-4ada-b460-b7e677b963f5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사실 여기가 제일 난감하다. 지금은 프로젝트가 소규모 프로젝트이고, 학습을 위한 프로젝트라서 간단하지 실제로 이게 대규모 프로젝트였다면 라이브러리를 등록하기
위한 Bean을 다 설정해 줘야 하는데 어디서부터 건드려야 할지 굉장히 어려워진다고 한다.&lt;/p&gt;

&lt;p&gt;그래서 우리는 Springboot가 제공해주는 AutoConfiguration이 있기에 라이브러리를 편리하게 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/61506907/how-can-a-library-module-of-a-spring-application-add-additional-configuration-to&quot;&gt;https://stackoverflow.com/questions/61506907/how-can-a-library-module-of-a-spring-application-add-additional-configuration-to&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/15/Spring-basic-14/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/15/Spring-basic-14/</guid>
        
        <category>spring</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring MVC 06 - Dispatcher-Servlet</title>
        <description>&lt;h2 id=&quot;dispatcher-servlet&quot;&gt;Dispatcher Servlet&lt;/h2&gt;

&lt;p&gt;디스패처 서블릿의 dispatch는 ‘보내다’라는 뜻을 가지고 있다.
디스패처 서블릿은 HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아 적합한 컨트롤러에 위임해주는 프론트 컨트롤러라고 정의할 수 있다.
클라이언트로부터 어떠한 요청이 오면 Tomcat과 같은 서블릿 컨테이너가 요청을 받는다. 그리고 이 모든 요청을 프론트 컨트롤러인 디스패치 서블릿이 가장 먼저
받게 된다. 그러면 디스패처 서블릿은 공통적인 작업을 먼저 처리한 후에 해당 요청을 처리해야 하는 컨트롤러를 찾아서 작업을 위임한다.
여기서 Front Controller는 서블릿 컨테이너의 제일 앞에서 서버로 들어오는 클라이언트의 모든 요청을 받아서 처리해주는 컨트롤러로써
MVC 구조에서 함께 사용되는 디자인 패턴이다.&lt;/p&gt;

&lt;h2 id=&quot;dispatcher-servlet의-장점은&quot;&gt;Dispatcher Servlet의 장점은?&lt;/h2&gt;

&lt;p&gt;Spring MVC에서 Dispatcher Servlet이 등장함에 따라서 web.xml의 역할을 상당히 축소시켰다.
과거에는 모든 서블릿을 URL 매핑을 위해 web.xml에 모두 등록해야 했다.
dispatcher Servlet의 등장으로 해당 애플리케이션으로 들어오는 모든 요청을 핸들링하고 공통 작업을 처리하면서 상당히 편리하게 이용한다.
우리는 컨트롤러를 구현만 해두면 디스패처 서블릿이 알아서 적합한 컨트롤러로 위임하게 된다. -&amp;gt; 그냥 컨트롤러에 집중만 하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;dispatcher-servlet의-동작&quot;&gt;Dispatcher Servlet의 동작&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/1e8516bc-7943-4553-87d1-91e44a8db7d5&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트의 요청을 디스패처 서블릿이 받는다.&lt;/li&gt;
  &lt;li&gt;요청 정보를 통해 요청을 위임할 컨트롤러를 찾는다.&lt;/li&gt;
  &lt;li&gt;요청을 컨트롤러로 위임할 핸들러 어댑터를 찾아서 전달한다.&lt;/li&gt;
  &lt;li&gt;핸들러 어댑터가 컨트롤러로 요청을 위임한다.&lt;/li&gt;
  &lt;li&gt;비즈니스 로직 수행 후 컨트롤러가 반환값을 반환한다.&lt;/li&gt;
  &lt;li&gt;핸들러 어댑터가 반환값을 처리하고 서버의 응답을 클라이언트로 반환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디스패처 서블릿은 요청을 처리할 핸들러(컨트롤러)를 찾고 객체의 메소드를 호출한다. 따라서 가장 먼저 어느 컨트롤러가 요청을 처리할 수 있는지를 식별해야 한다.
해당 역할을 하는 것이 바로 HandlerMapping이다.&lt;/p&gt;

&lt;p&gt;결론은 디스패처 서블릿을 통해 요청을 처리할 컨트롤러를 찾아서 위임하고, 그 결과를 받아오는 정도로 이해하면 좋다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/reference/web/webmvc.html&quot;&gt;https://docs.spring.io/spring-framework/reference/web/webmvc.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/08/Spring-framework-mvc-06/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/08/Spring-framework-mvc-06/</guid>
        
        <category>mvc</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>Spring MVC 05 - Query Parameter</title>
        <description>&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;

&lt;p&gt;쿼리는 ‘문의’ 또는 ‘물음표’라는 사전적 의미를 가지고 있다. 쿼리 파라미터는 URL 뒤에 물음표 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;와 함께 붙는 키-값(key-value)
쌍이다. 여래 개의 파라미터를 전달하려면 파라미터 사이에 앰퍼샌드 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;를 추가해서 하나의 문자열(string)으로 전달한다.
쿼리 파라미터로는 문자열뿐만 아니라 숫자, 리스트 등 다양한 형태의 데이터를 넣을 수 있다.
쿼리 파라미터는 다양한 용도가 있는데, 웹 서버의 요청에 대한 추가 정보를 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;그럼-언제가-적절할까&quot;&gt;그럼 언제가 적절할까?&lt;/h2&gt;

&lt;p&gt;Query parameter는 url에서 특정한 조건을 주고싶을 때 사용하는 것이 적절하다.
같은 API를 호출한다고 해도, 서로 다른 조건을 나열하는 것이 필요한 상황에 사용한다.
같은 신발 목록 데이터를 호출 하는데, 신상품 순, 사이즈가 250인 데이터만 따로, 260인 데이터만 따로, 낮은 가격순으로 데이터를 호출하는
API를 매번 새롭게 생성하는 것은 비효율적이다. 따라서 필요한 조건을 요청에 따라 선택적으로 처리할 수 있는 통일된 API를 구성할 때 사용한다.
쿼리 파라미터는 HTTP [GET], [DELETE] 요청에서만 사용하고, 유일 값을 식별하기 위한 용도가 아닌 옵션을 줄 때 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;사이즈가 230인 신발 요청&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  GET /shoes?size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;230
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;가격이 낮은 순으로 정렬된 신발 요청&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  GET /shoes?sort&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;price_asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이처럼 쿼리 파라미터를 사용하면 하나의 API(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/shoes&lt;/code&gt;)로 다양한 조건의 데이터를 요청할 수 있으니 효율적이다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/reference/web/webmvc.html&quot;&gt;https://docs.spring.io/spring-framework/reference/web/webmvc.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/06/Spring-framework-mvc-05/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/06/Spring-framework-mvc-05/</guid>
        
        <category>mvc</category>
        
        
        <category>framework</category>
        
      </item>
    
      <item>
        <title>SpringBoot Contribute</title>
        <description>&lt;h2 id=&quot;issue&quot;&gt;Issue&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/79f345b0-d55c-497f-8e86-06ad21f9bf04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링에서 Open되어있는 이슈들에서 task를 받아서 기여할 수도 있지만 나는 평소 스프링이 어떻게 구조화 되어있는지 내심 궁금했기에 
하나하나 소스코드들을 읽어 보았다. 그러던 와중에 스프링에 문제아닌 문제? 마이너한 문제를 찾을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/07134b6a-2b24-4bd5-a93e-dde1c7d2e906&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SpringBoot/http/client에 ReflectiveComponentsClientHttpRequestFactoryBuilder의 생성자에서 assert 오류 메시지 포맷을 개선한 변경 하였다.
기존의 오류 메시지가 문자열이 하드코딩되어 있어, 메시지 수정이나 로컬라이징 작업이 어려워 보였고 String.format()을 사용하여 동적으로 생성되도록 수정하였다.
사실 개선사항이 크게 필요는 없는 부분이지만 장기적으로 보았을 땐 변경되는 코드에 따라서 메시지의 포맷이 일관되게 유지되면 좋겠다고 생각했다.
그리고 무엇보다 오픈소스 생태계 그것도 스프링 오픈소스 생태계에 기여해볼 수 있다는 것이 가장 큰 동기부여가 되었다.&lt;/p&gt;

&lt;h2 id=&quot;변경&quot;&gt;변경&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/80281847-748a-4534-9549-0d8e99939b56&quot; /&gt;&lt;/p&gt;

&lt;p&gt;매우 작고 간단했던 작업 내용이였지만 내가 직접 세계적인 오픈소스의 컨트리뷰터가 되기 위한 첫 걸음을 나아갔다는 점에서 상당히 뿌듯하다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/5c2992cb-3b2c-4abb-a4a3-5da7e1eb0b2e&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 오픈소스들이라면 코딩 및 커밋 컨벤션을 가지고 있다. 해당 규칙을 만족해야 커밋이 반영이 된다. 
SpringBoot 같은 경우에는 &lt;a href=&quot;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;여기&lt;/a&gt;에서 컨벤션 규칙을 정리해두었다. 꼭 읽고 커밋하자&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/opensource/2024/12/03/SpringBoot-contribute-01/</link>
        <guid isPermaLink="true">http://localhost:4000/opensource/2024/12/03/SpringBoot-contribute-01/</guid>
        
        <category>opensource</category>
        
        
        <category>opensource</category>
        
      </item>
    
      <item>
        <title>Spring MVC 04 - RequestParameter - Query</title>
        <description>&lt;h2 id=&quot;client-to-server&quot;&gt;Client to Server&lt;/h2&gt;

&lt;h3 id=&quot;get---쿼리-파라미터&quot;&gt;GET - 쿼리 파라미터&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;/url ?username = hello&amp;amp;age=20
    &lt;ul&gt;
      &lt;li&gt;메시지 바디 없이 URL의 쿼리 파라미터에 데이터를 포함해서 전달&lt;/li&gt;
      &lt;li&gt;검색 필터, 페이징등에서 많이 사용하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;post---html-form&quot;&gt;POST - HTML Form&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;content-type: application/x-www.form-urlencoded
    &lt;ul&gt;
      &lt;li&gt;회원 가입, 상품 주문, HTML Form 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-message-body&quot;&gt;HTTP Message body&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP API에서 주로 사용, JSON, XML, TEXT
    &lt;ul&gt;
      &lt;li&gt;데이터 형식은 주로 JSON 사용&lt;/li&gt;
      &lt;li&gt;POST, PUT, PATCH&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http으로-요청-파라미터-조회&quot;&gt;HTTP으로 요청 파라미터 조회&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/44d90888-6c4c-41f7-bfbf-753c695734f2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/6e7f3bde-4900-4aca-ada0-cc25aef49aa4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring으로-요청-파라미터-조회&quot;&gt;Spring으로 요청 파라미터 조회&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/0d004f0c-0196-4650-93bc-66cdce712724&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RequestParam을 사용하면 요청 파리미터를 쉽게 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;@Controller이면서 반환타입이 String 이면 ok라는 뷰를 찾게 된다.&lt;/li&gt;
  &lt;li&gt;따라서 클래스 레벨에서 @RestController로 변경해주거나, 메소드 레벨에서 @ReponseBody를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/8420783a-23ca-48ac-b6b2-6ed155fb4d7c&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String, int 등의 단순 타입이면 @RequestParam 도 생략 가능&lt;/li&gt;
  &lt;li&gt;String, int, Integer 등의  단순 타입이면 @RequestParam 도 생략가능
    &lt;ul&gt;
      &lt;li&gt;이렇게 애노테이션을 완전히 생략해도 되는데, 너무 없는 것도 약간 과하다는 주관적 생각이 있다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 이 있으면 명확하게 요청 파리미터에서 데이터를 읽는 다는 것을 알 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/6445a22e-592e-437a-bc40-4c2285a46102&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(와중에 FHD, MAC 화질차이가..)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RequiredParam 속성에서 기본값은 true이다. 아무것도 명시해주지 않는다면 false로 적용이 되어있다.&lt;/li&gt;
  &lt;li&gt;위의코드는 age는 필수값이 되어있고, username은 필수가 아니다.&lt;/li&gt;
  &lt;li&gt;또한 자바에서는 기본형은 null을 허용하지 않고, Integer(객체)는 null을 허용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modelattribute&quot;&gt;ModelAttribute&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/40b5bb13-6c54-4485-94e0-ecff9255615e&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ModelAttribute를 활용해보기 위해서 HelloData 객체 생성&lt;/li&gt;
  &lt;li&gt;Lombok이 제공해주는 @Data로 @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor를 자동으로 적용해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/3bcf608d-0322-4665-984f-958497c1ab4f&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위에 두 코드는 같은 기능을 하는 코드이다.&lt;/li&gt;
  &lt;li&gt;@ModelAttribute를 사용하면 @ModelAttribute는 HelloData 객체를 생성하고 요청 파라미터 이름으로 HelloData 객체의 프로퍼티를 찾는다. 그리고 해당 프로퍼티의 setter를 호출해서 파라미터 값을 입력한다.
    &lt;ul&gt;
      &lt;li&gt;파라미터 이름이 username이라면 setUsername() 메서드를 찾아서 호출하면서 값을 입력해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/ef23de6e-38e9-4ce8-b14c-b5581cd1ceff&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt; 는 생략할 수 있다. 그런데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;도 생략할 수 있으니 혼란이 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;스프링은 해당 생략시 다음과 같은 규칙을 적용한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt; 같은 단순 타입 = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;나머지 = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt; (argument resolver 로 지정해둔 타입 외)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slf4j.org&quot;&gt;http://www.slf4j.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://logback.qos.ch&quot;&gt;http://logback.qos.ch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging?&quot;&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2024 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/framework/2024/12/01/Spring-framework-mvc-04/</link>
        <guid isPermaLink="true">http://localhost:4000/framework/2024/12/01/Spring-framework-mvc-04/</guid>
        
        <category>mvc</category>
        
        
        <category>framework</category>
        
      </item>
    
  </channel>
</rss>
